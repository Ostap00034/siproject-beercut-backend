// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Ostap00034/siproject-beercut-backend/exhibition-service/ent/exhibition"
)

// Exhibition is the model entity for the Exhibition schema.
type Exhibition struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// PicturesIds holds the value of the "pictures_ids" field.
	PicturesIds []string `json:"pictures_ids,omitempty"`
	// Status holds the value of the "status" field.
	Status exhibition.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Exhibition) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case exhibition.FieldPicturesIds:
			values[i] = new([]byte)
		case exhibition.FieldID:
			values[i] = new(sql.NullInt64)
		case exhibition.FieldName, exhibition.FieldDescription, exhibition.FieldStatus:
			values[i] = new(sql.NullString)
		case exhibition.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Exhibition fields.
func (e *Exhibition) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exhibition.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case exhibition.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case exhibition.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = value.String
			}
		case exhibition.FieldPicturesIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field pictures_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.PicturesIds); err != nil {
					return fmt.Errorf("unmarshal field pictures_ids: %w", err)
				}
			}
		case exhibition.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				e.Status = exhibition.Status(value.String)
			}
		case exhibition.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Exhibition.
// This includes values selected through modifiers, order, etc.
func (e *Exhibition) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// Update returns a builder for updating this Exhibition.
// Note that you need to call Exhibition.Unwrap() before calling this method if this Exhibition
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Exhibition) Update() *ExhibitionUpdateOne {
	return NewExhibitionClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Exhibition entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Exhibition) Unwrap() *Exhibition {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Exhibition is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Exhibition) String() string {
	var builder strings.Builder
	builder.WriteString("Exhibition(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("name=")
	builder.WriteString(e.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(e.Description)
	builder.WriteString(", ")
	builder.WriteString("pictures_ids=")
	builder.WriteString(fmt.Sprintf("%v", e.PicturesIds))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", e.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Exhibitions is a parsable slice of Exhibition.
type Exhibitions []*Exhibition
