// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/Ostap00034/siproject-beercut-backend/exhibition-service/ent/exhibition"
	"github.com/Ostap00034/siproject-beercut-backend/exhibition-service/ent/predicate"
)

// ExhibitionUpdate is the builder for updating Exhibition entities.
type ExhibitionUpdate struct {
	config
	hooks    []Hook
	mutation *ExhibitionMutation
}

// Where appends a list predicates to the ExhibitionUpdate builder.
func (eu *ExhibitionUpdate) Where(ps ...predicate.Exhibition) *ExhibitionUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetName sets the "name" field.
func (eu *ExhibitionUpdate) SetName(s string) *ExhibitionUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (eu *ExhibitionUpdate) SetNillableName(s *string) *ExhibitionUpdate {
	if s != nil {
		eu.SetName(*s)
	}
	return eu
}

// SetDescription sets the "description" field.
func (eu *ExhibitionUpdate) SetDescription(s string) *ExhibitionUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *ExhibitionUpdate) SetNillableDescription(s *string) *ExhibitionUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// SetPicturesIds sets the "pictures_ids" field.
func (eu *ExhibitionUpdate) SetPicturesIds(s []string) *ExhibitionUpdate {
	eu.mutation.SetPicturesIds(s)
	return eu
}

// AppendPicturesIds appends s to the "pictures_ids" field.
func (eu *ExhibitionUpdate) AppendPicturesIds(s []string) *ExhibitionUpdate {
	eu.mutation.AppendPicturesIds(s)
	return eu
}

// ClearPicturesIds clears the value of the "pictures_ids" field.
func (eu *ExhibitionUpdate) ClearPicturesIds() *ExhibitionUpdate {
	eu.mutation.ClearPicturesIds()
	return eu
}

// SetStatus sets the "status" field.
func (eu *ExhibitionUpdate) SetStatus(e exhibition.Status) *ExhibitionUpdate {
	eu.mutation.SetStatus(e)
	return eu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eu *ExhibitionUpdate) SetNillableStatus(e *exhibition.Status) *ExhibitionUpdate {
	if e != nil {
		eu.SetStatus(*e)
	}
	return eu
}

// SetCreatedAt sets the "created_at" field.
func (eu *ExhibitionUpdate) SetCreatedAt(t time.Time) *ExhibitionUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eu *ExhibitionUpdate) SetNillableCreatedAt(t *time.Time) *ExhibitionUpdate {
	if t != nil {
		eu.SetCreatedAt(*t)
	}
	return eu
}

// Mutation returns the ExhibitionMutation object of the builder.
func (eu *ExhibitionUpdate) Mutation() *ExhibitionMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExhibitionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExhibitionUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExhibitionUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExhibitionUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *ExhibitionUpdate) check() error {
	if v, ok := eu.mutation.Name(); ok {
		if err := exhibition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Exhibition.name": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Status(); ok {
		if err := exhibition.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Exhibition.status": %w`, err)}
		}
	}
	return nil
}

func (eu *ExhibitionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(exhibition.Table, exhibition.Columns, sqlgraph.NewFieldSpec(exhibition.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.SetField(exhibition.FieldName, field.TypeString, value)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(exhibition.FieldDescription, field.TypeString, value)
	}
	if value, ok := eu.mutation.PicturesIds(); ok {
		_spec.SetField(exhibition.FieldPicturesIds, field.TypeJSON, value)
	}
	if value, ok := eu.mutation.AppendedPicturesIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exhibition.FieldPicturesIds, value)
		})
	}
	if eu.mutation.PicturesIdsCleared() {
		_spec.ClearField(exhibition.FieldPicturesIds, field.TypeJSON)
	}
	if value, ok := eu.mutation.Status(); ok {
		_spec.SetField(exhibition.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.SetField(exhibition.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exhibition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExhibitionUpdateOne is the builder for updating a single Exhibition entity.
type ExhibitionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExhibitionMutation
}

// SetName sets the "name" field.
func (euo *ExhibitionUpdateOne) SetName(s string) *ExhibitionUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (euo *ExhibitionUpdateOne) SetNillableName(s *string) *ExhibitionUpdateOne {
	if s != nil {
		euo.SetName(*s)
	}
	return euo
}

// SetDescription sets the "description" field.
func (euo *ExhibitionUpdateOne) SetDescription(s string) *ExhibitionUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *ExhibitionUpdateOne) SetNillableDescription(s *string) *ExhibitionUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// SetPicturesIds sets the "pictures_ids" field.
func (euo *ExhibitionUpdateOne) SetPicturesIds(s []string) *ExhibitionUpdateOne {
	euo.mutation.SetPicturesIds(s)
	return euo
}

// AppendPicturesIds appends s to the "pictures_ids" field.
func (euo *ExhibitionUpdateOne) AppendPicturesIds(s []string) *ExhibitionUpdateOne {
	euo.mutation.AppendPicturesIds(s)
	return euo
}

// ClearPicturesIds clears the value of the "pictures_ids" field.
func (euo *ExhibitionUpdateOne) ClearPicturesIds() *ExhibitionUpdateOne {
	euo.mutation.ClearPicturesIds()
	return euo
}

// SetStatus sets the "status" field.
func (euo *ExhibitionUpdateOne) SetStatus(e exhibition.Status) *ExhibitionUpdateOne {
	euo.mutation.SetStatus(e)
	return euo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (euo *ExhibitionUpdateOne) SetNillableStatus(e *exhibition.Status) *ExhibitionUpdateOne {
	if e != nil {
		euo.SetStatus(*e)
	}
	return euo
}

// SetCreatedAt sets the "created_at" field.
func (euo *ExhibitionUpdateOne) SetCreatedAt(t time.Time) *ExhibitionUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euo *ExhibitionUpdateOne) SetNillableCreatedAt(t *time.Time) *ExhibitionUpdateOne {
	if t != nil {
		euo.SetCreatedAt(*t)
	}
	return euo
}

// Mutation returns the ExhibitionMutation object of the builder.
func (euo *ExhibitionUpdateOne) Mutation() *ExhibitionMutation {
	return euo.mutation
}

// Where appends a list predicates to the ExhibitionUpdate builder.
func (euo *ExhibitionUpdateOne) Where(ps ...predicate.Exhibition) *ExhibitionUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExhibitionUpdateOne) Select(field string, fields ...string) *ExhibitionUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Exhibition entity.
func (euo *ExhibitionUpdateOne) Save(ctx context.Context) (*Exhibition, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExhibitionUpdateOne) SaveX(ctx context.Context) *Exhibition {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExhibitionUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExhibitionUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *ExhibitionUpdateOne) check() error {
	if v, ok := euo.mutation.Name(); ok {
		if err := exhibition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Exhibition.name": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Status(); ok {
		if err := exhibition.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Exhibition.status": %w`, err)}
		}
	}
	return nil
}

func (euo *ExhibitionUpdateOne) sqlSave(ctx context.Context) (_node *Exhibition, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(exhibition.Table, exhibition.Columns, sqlgraph.NewFieldSpec(exhibition.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exhibition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exhibition.FieldID)
		for _, f := range fields {
			if !exhibition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exhibition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.SetField(exhibition.FieldName, field.TypeString, value)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(exhibition.FieldDescription, field.TypeString, value)
	}
	if value, ok := euo.mutation.PicturesIds(); ok {
		_spec.SetField(exhibition.FieldPicturesIds, field.TypeJSON, value)
	}
	if value, ok := euo.mutation.AppendedPicturesIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exhibition.FieldPicturesIds, value)
		})
	}
	if euo.mutation.PicturesIdsCleared() {
		_spec.ClearField(exhibition.FieldPicturesIds, field.TypeJSON)
	}
	if value, ok := euo.mutation.Status(); ok {
		_spec.SetField(exhibition.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.SetField(exhibition.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Exhibition{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exhibition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
