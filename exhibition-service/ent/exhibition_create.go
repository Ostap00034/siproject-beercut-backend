// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Ostap00034/siproject-beercut-backend/exhibition-service/ent/exhibition"
)

// ExhibitionCreate is the builder for creating a Exhibition entity.
type ExhibitionCreate struct {
	config
	mutation *ExhibitionMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ec *ExhibitionCreate) SetName(s string) *ExhibitionCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetDescription sets the "description" field.
func (ec *ExhibitionCreate) SetDescription(s string) *ExhibitionCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetPicturesIds sets the "pictures_ids" field.
func (ec *ExhibitionCreate) SetPicturesIds(s []string) *ExhibitionCreate {
	ec.mutation.SetPicturesIds(s)
	return ec
}

// SetStatus sets the "status" field.
func (ec *ExhibitionCreate) SetStatus(e exhibition.Status) *ExhibitionCreate {
	ec.mutation.SetStatus(e)
	return ec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ec *ExhibitionCreate) SetNillableStatus(e *exhibition.Status) *ExhibitionCreate {
	if e != nil {
		ec.SetStatus(*e)
	}
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *ExhibitionCreate) SetCreatedAt(t time.Time) *ExhibitionCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *ExhibitionCreate) SetNillableCreatedAt(t *time.Time) *ExhibitionCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// Mutation returns the ExhibitionMutation object of the builder.
func (ec *ExhibitionCreate) Mutation() *ExhibitionMutation {
	return ec.mutation
}

// Save creates the Exhibition in the database.
func (ec *ExhibitionCreate) Save(ctx context.Context) (*Exhibition, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExhibitionCreate) SaveX(ctx context.Context) *Exhibition {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ExhibitionCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ExhibitionCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *ExhibitionCreate) defaults() {
	if _, ok := ec.mutation.Status(); !ok {
		v := exhibition.DefaultStatus
		ec.mutation.SetStatus(v)
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := exhibition.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ExhibitionCreate) check() error {
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Exhibition.name"`)}
	}
	if v, ok := ec.mutation.Name(); ok {
		if err := exhibition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Exhibition.name": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Exhibition.description"`)}
	}
	if _, ok := ec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Exhibition.status"`)}
	}
	if v, ok := ec.mutation.Status(); ok {
		if err := exhibition.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Exhibition.status": %w`, err)}
		}
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Exhibition.created_at"`)}
	}
	return nil
}

func (ec *ExhibitionCreate) sqlSave(ctx context.Context) (*Exhibition, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *ExhibitionCreate) createSpec() (*Exhibition, *sqlgraph.CreateSpec) {
	var (
		_node = &Exhibition{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(exhibition.Table, sqlgraph.NewFieldSpec(exhibition.FieldID, field.TypeInt))
	)
	if value, ok := ec.mutation.Name(); ok {
		_spec.SetField(exhibition.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.SetField(exhibition.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ec.mutation.PicturesIds(); ok {
		_spec.SetField(exhibition.FieldPicturesIds, field.TypeJSON, value)
		_node.PicturesIds = value
	}
	if value, ok := ec.mutation.Status(); ok {
		_spec.SetField(exhibition.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(exhibition.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// ExhibitionCreateBulk is the builder for creating many Exhibition entities in bulk.
type ExhibitionCreateBulk struct {
	config
	err      error
	builders []*ExhibitionCreate
}

// Save creates the Exhibition entities in the database.
func (ecb *ExhibitionCreateBulk) Save(ctx context.Context) ([]*Exhibition, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Exhibition, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExhibitionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ExhibitionCreateBulk) SaveX(ctx context.Context) []*Exhibition {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ExhibitionCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ExhibitionCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
