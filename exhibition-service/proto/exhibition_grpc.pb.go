// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/exhibition.proto

package exhibition

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExhibitionService_CreateExhibition_FullMethodName = "/exhibition.ExhibitionService/CreateExhibition"
	ExhibitionService_GetAll_FullMethodName           = "/exhibition.ExhibitionService/GetAll"
	ExhibitionService_GetExhibition_FullMethodName    = "/exhibition.ExhibitionService/GetExhibition"
	ExhibitionService_UpdateExhibition_FullMethodName = "/exhibition.ExhibitionService/UpdateExhibition"
	ExhibitionService_DeleteExhibition_FullMethodName = "/exhibition.ExhibitionService/DeleteExhibition"
)

// ExhibitionServiceClient is the client API for ExhibitionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExhibitionServiceClient interface {
	CreateExhibition(ctx context.Context, in *CreateExhibitionRequest, opts ...grpc.CallOption) (*CreateExhibitionResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	GetExhibition(ctx context.Context, in *GetExhibitionRequest, opts ...grpc.CallOption) (*GetExhibitionResponse, error)
	UpdateExhibition(ctx context.Context, in *UpdateExhibitionRequest, opts ...grpc.CallOption) (*UpdateExhibitionResponse, error)
	DeleteExhibition(ctx context.Context, in *DeleteExhibitionRequest, opts ...grpc.CallOption) (*DeleteExhibitionResponse, error)
}

type exhibitionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExhibitionServiceClient(cc grpc.ClientConnInterface) ExhibitionServiceClient {
	return &exhibitionServiceClient{cc}
}

func (c *exhibitionServiceClient) CreateExhibition(ctx context.Context, in *CreateExhibitionRequest, opts ...grpc.CallOption) (*CreateExhibitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateExhibitionResponse)
	err := c.cc.Invoke(ctx, ExhibitionService_CreateExhibition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exhibitionServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, ExhibitionService_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exhibitionServiceClient) GetExhibition(ctx context.Context, in *GetExhibitionRequest, opts ...grpc.CallOption) (*GetExhibitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExhibitionResponse)
	err := c.cc.Invoke(ctx, ExhibitionService_GetExhibition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exhibitionServiceClient) UpdateExhibition(ctx context.Context, in *UpdateExhibitionRequest, opts ...grpc.CallOption) (*UpdateExhibitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateExhibitionResponse)
	err := c.cc.Invoke(ctx, ExhibitionService_UpdateExhibition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exhibitionServiceClient) DeleteExhibition(ctx context.Context, in *DeleteExhibitionRequest, opts ...grpc.CallOption) (*DeleteExhibitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteExhibitionResponse)
	err := c.cc.Invoke(ctx, ExhibitionService_DeleteExhibition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExhibitionServiceServer is the server API for ExhibitionService service.
// All implementations must embed UnimplementedExhibitionServiceServer
// for forward compatibility.
type ExhibitionServiceServer interface {
	CreateExhibition(context.Context, *CreateExhibitionRequest) (*CreateExhibitionResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	GetExhibition(context.Context, *GetExhibitionRequest) (*GetExhibitionResponse, error)
	UpdateExhibition(context.Context, *UpdateExhibitionRequest) (*UpdateExhibitionResponse, error)
	DeleteExhibition(context.Context, *DeleteExhibitionRequest) (*DeleteExhibitionResponse, error)
	mustEmbedUnimplementedExhibitionServiceServer()
}

// UnimplementedExhibitionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExhibitionServiceServer struct{}

func (UnimplementedExhibitionServiceServer) CreateExhibition(context.Context, *CreateExhibitionRequest) (*CreateExhibitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExhibition not implemented")
}
func (UnimplementedExhibitionServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedExhibitionServiceServer) GetExhibition(context.Context, *GetExhibitionRequest) (*GetExhibitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExhibition not implemented")
}
func (UnimplementedExhibitionServiceServer) UpdateExhibition(context.Context, *UpdateExhibitionRequest) (*UpdateExhibitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExhibition not implemented")
}
func (UnimplementedExhibitionServiceServer) DeleteExhibition(context.Context, *DeleteExhibitionRequest) (*DeleteExhibitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExhibition not implemented")
}
func (UnimplementedExhibitionServiceServer) mustEmbedUnimplementedExhibitionServiceServer() {}
func (UnimplementedExhibitionServiceServer) testEmbeddedByValue()                           {}

// UnsafeExhibitionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExhibitionServiceServer will
// result in compilation errors.
type UnsafeExhibitionServiceServer interface {
	mustEmbedUnimplementedExhibitionServiceServer()
}

func RegisterExhibitionServiceServer(s grpc.ServiceRegistrar, srv ExhibitionServiceServer) {
	// If the following call pancis, it indicates UnimplementedExhibitionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExhibitionService_ServiceDesc, srv)
}

func _ExhibitionService_CreateExhibition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExhibitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExhibitionServiceServer).CreateExhibition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExhibitionService_CreateExhibition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExhibitionServiceServer).CreateExhibition(ctx, req.(*CreateExhibitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExhibitionService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExhibitionServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExhibitionService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExhibitionServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExhibitionService_GetExhibition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExhibitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExhibitionServiceServer).GetExhibition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExhibitionService_GetExhibition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExhibitionServiceServer).GetExhibition(ctx, req.(*GetExhibitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExhibitionService_UpdateExhibition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExhibitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExhibitionServiceServer).UpdateExhibition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExhibitionService_UpdateExhibition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExhibitionServiceServer).UpdateExhibition(ctx, req.(*UpdateExhibitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExhibitionService_DeleteExhibition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExhibitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExhibitionServiceServer).DeleteExhibition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExhibitionService_DeleteExhibition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExhibitionServiceServer).DeleteExhibition(ctx, req.(*DeleteExhibitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExhibitionService_ServiceDesc is the grpc.ServiceDesc for ExhibitionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExhibitionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exhibition.ExhibitionService",
	HandlerType: (*ExhibitionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExhibition",
			Handler:    _ExhibitionService_CreateExhibition_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ExhibitionService_GetAll_Handler,
		},
		{
			MethodName: "GetExhibition",
			Handler:    _ExhibitionService_GetExhibition_Handler,
		},
		{
			MethodName: "UpdateExhibition",
			Handler:    _ExhibitionService_UpdateExhibition_Handler,
		},
		{
			MethodName: "DeleteExhibition",
			Handler:    _ExhibitionService_DeleteExhibition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/exhibition.proto",
}
