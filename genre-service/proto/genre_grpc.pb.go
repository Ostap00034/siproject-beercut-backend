// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/genre.proto

package genre

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GenreService_CreateGenre_FullMethodName = "/genre.GenreService/CreateGenre"
	GenreService_GetAll_FullMethodName      = "/genre.GenreService/GetAll"
	GenreService_GetGenre_FullMethodName    = "/genre.GenreService/GetGenre"
	GenreService_UpdateGenre_FullMethodName = "/genre.GenreService/UpdateGenre"
	GenreService_DeleteGenre_FullMethodName = "/genre.GenreService/DeleteGenre"
)

// GenreServiceClient is the client API for GenreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenreServiceClient interface {
	CreateGenre(ctx context.Context, in *CreateGenreRequest, opts ...grpc.CallOption) (*CreateGenreResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	GetGenre(ctx context.Context, in *GetGenreRequest, opts ...grpc.CallOption) (*GetGenreResponse, error)
	UpdateGenre(ctx context.Context, in *UpdateGenreRequest, opts ...grpc.CallOption) (*UpdateGenreResponse, error)
	DeleteGenre(ctx context.Context, in *DeleteGenreRequest, opts ...grpc.CallOption) (*DeleteGenreResponse, error)
}

type genreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGenreServiceClient(cc grpc.ClientConnInterface) GenreServiceClient {
	return &genreServiceClient{cc}
}

func (c *genreServiceClient) CreateGenre(ctx context.Context, in *CreateGenreRequest, opts ...grpc.CallOption) (*CreateGenreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGenreResponse)
	err := c.cc.Invoke(ctx, GenreService_CreateGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, GenreService_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreServiceClient) GetGenre(ctx context.Context, in *GetGenreRequest, opts ...grpc.CallOption) (*GetGenreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGenreResponse)
	err := c.cc.Invoke(ctx, GenreService_GetGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreServiceClient) UpdateGenre(ctx context.Context, in *UpdateGenreRequest, opts ...grpc.CallOption) (*UpdateGenreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGenreResponse)
	err := c.cc.Invoke(ctx, GenreService_UpdateGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreServiceClient) DeleteGenre(ctx context.Context, in *DeleteGenreRequest, opts ...grpc.CallOption) (*DeleteGenreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGenreResponse)
	err := c.cc.Invoke(ctx, GenreService_DeleteGenre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenreServiceServer is the server API for GenreService service.
// All implementations must embed UnimplementedGenreServiceServer
// for forward compatibility.
type GenreServiceServer interface {
	CreateGenre(context.Context, *CreateGenreRequest) (*CreateGenreResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	GetGenre(context.Context, *GetGenreRequest) (*GetGenreResponse, error)
	UpdateGenre(context.Context, *UpdateGenreRequest) (*UpdateGenreResponse, error)
	DeleteGenre(context.Context, *DeleteGenreRequest) (*DeleteGenreResponse, error)
	mustEmbedUnimplementedGenreServiceServer()
}

// UnimplementedGenreServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGenreServiceServer struct{}

func (UnimplementedGenreServiceServer) CreateGenre(context.Context, *CreateGenreRequest) (*CreateGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenre not implemented")
}
func (UnimplementedGenreServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedGenreServiceServer) GetGenre(context.Context, *GetGenreRequest) (*GetGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenre not implemented")
}
func (UnimplementedGenreServiceServer) UpdateGenre(context.Context, *UpdateGenreRequest) (*UpdateGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGenre not implemented")
}
func (UnimplementedGenreServiceServer) DeleteGenre(context.Context, *DeleteGenreRequest) (*DeleteGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGenre not implemented")
}
func (UnimplementedGenreServiceServer) mustEmbedUnimplementedGenreServiceServer() {}
func (UnimplementedGenreServiceServer) testEmbeddedByValue()                      {}

// UnsafeGenreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenreServiceServer will
// result in compilation errors.
type UnsafeGenreServiceServer interface {
	mustEmbedUnimplementedGenreServiceServer()
}

func RegisterGenreServiceServer(s grpc.ServiceRegistrar, srv GenreServiceServer) {
	// If the following call pancis, it indicates UnimplementedGenreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GenreService_ServiceDesc, srv)
}

func _GenreService_CreateGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreServiceServer).CreateGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenreService_CreateGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreServiceServer).CreateGenre(ctx, req.(*CreateGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenreService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenreService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenreService_GetGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreServiceServer).GetGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenreService_GetGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreServiceServer).GetGenre(ctx, req.(*GetGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenreService_UpdateGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreServiceServer).UpdateGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenreService_UpdateGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreServiceServer).UpdateGenre(ctx, req.(*UpdateGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenreService_DeleteGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreServiceServer).DeleteGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenreService_DeleteGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreServiceServer).DeleteGenre(ctx, req.(*DeleteGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GenreService_ServiceDesc is the grpc.ServiceDesc for GenreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "genre.GenreService",
	HandlerType: (*GenreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGenre",
			Handler:    _GenreService_CreateGenre_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _GenreService_GetAll_Handler,
		},
		{
			MethodName: "GetGenre",
			Handler:    _GenreService_GetGenre_Handler,
		},
		{
			MethodName: "UpdateGenre",
			Handler:    _GenreService_UpdateGenre_Handler,
		},
		{
			MethodName: "DeleteGenre",
			Handler:    _GenreService_DeleteGenre_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/genre.proto",
}
