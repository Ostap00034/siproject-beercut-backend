// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Ostap00034/siproject-beercut-backend/picture-service/ent/picture"
	"github.com/Ostap00034/siproject-beercut-backend/picture-service/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePicture = "Picture"
)

// PictureMutation represents an operation that mutates the Picture nodes in the graph.
type PictureMutation struct {
	config
	op                Op
	typ               string
	id                *int
	name              *string
	date_of_painting  *string
	genres_ids        *[]string
	appendgenres_ids  []string
	authors_ids       *[]string
	appendauthors_ids []string
	exhibition_id     *string
	cost              *float64
	addcost           *float64
	location          *picture.Location
	created_at        *time.Time
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*Picture, error)
	predicates        []predicate.Picture
}

var _ ent.Mutation = (*PictureMutation)(nil)

// pictureOption allows management of the mutation configuration using functional options.
type pictureOption func(*PictureMutation)

// newPictureMutation creates new mutation for the Picture entity.
func newPictureMutation(c config, op Op, opts ...pictureOption) *PictureMutation {
	m := &PictureMutation{
		config:        c,
		op:            op,
		typ:           TypePicture,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPictureID sets the ID field of the mutation.
func withPictureID(id int) pictureOption {
	return func(m *PictureMutation) {
		var (
			err   error
			once  sync.Once
			value *Picture
		)
		m.oldValue = func(ctx context.Context) (*Picture, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Picture.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPicture sets the old Picture of the mutation.
func withPicture(node *Picture) pictureOption {
	return func(m *PictureMutation) {
		m.oldValue = func(context.Context) (*Picture, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PictureMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PictureMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PictureMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PictureMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Picture.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PictureMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PictureMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Picture entity.
// If the Picture object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PictureMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PictureMutation) ResetName() {
	m.name = nil
}

// SetDateOfPainting sets the "date_of_painting" field.
func (m *PictureMutation) SetDateOfPainting(s string) {
	m.date_of_painting = &s
}

// DateOfPainting returns the value of the "date_of_painting" field in the mutation.
func (m *PictureMutation) DateOfPainting() (r string, exists bool) {
	v := m.date_of_painting
	if v == nil {
		return
	}
	return *v, true
}

// OldDateOfPainting returns the old "date_of_painting" field's value of the Picture entity.
// If the Picture object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PictureMutation) OldDateOfPainting(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDateOfPainting is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDateOfPainting requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateOfPainting: %w", err)
	}
	return oldValue.DateOfPainting, nil
}

// ResetDateOfPainting resets all changes to the "date_of_painting" field.
func (m *PictureMutation) ResetDateOfPainting() {
	m.date_of_painting = nil
}

// SetGenresIds sets the "genres_ids" field.
func (m *PictureMutation) SetGenresIds(s []string) {
	m.genres_ids = &s
	m.appendgenres_ids = nil
}

// GenresIds returns the value of the "genres_ids" field in the mutation.
func (m *PictureMutation) GenresIds() (r []string, exists bool) {
	v := m.genres_ids
	if v == nil {
		return
	}
	return *v, true
}

// OldGenresIds returns the old "genres_ids" field's value of the Picture entity.
// If the Picture object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PictureMutation) OldGenresIds(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGenresIds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGenresIds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGenresIds: %w", err)
	}
	return oldValue.GenresIds, nil
}

// AppendGenresIds adds s to the "genres_ids" field.
func (m *PictureMutation) AppendGenresIds(s []string) {
	m.appendgenres_ids = append(m.appendgenres_ids, s...)
}

// AppendedGenresIds returns the list of values that were appended to the "genres_ids" field in this mutation.
func (m *PictureMutation) AppendedGenresIds() ([]string, bool) {
	if len(m.appendgenres_ids) == 0 {
		return nil, false
	}
	return m.appendgenres_ids, true
}

// ClearGenresIds clears the value of the "genres_ids" field.
func (m *PictureMutation) ClearGenresIds() {
	m.genres_ids = nil
	m.appendgenres_ids = nil
	m.clearedFields[picture.FieldGenresIds] = struct{}{}
}

// GenresIdsCleared returns if the "genres_ids" field was cleared in this mutation.
func (m *PictureMutation) GenresIdsCleared() bool {
	_, ok := m.clearedFields[picture.FieldGenresIds]
	return ok
}

// ResetGenresIds resets all changes to the "genres_ids" field.
func (m *PictureMutation) ResetGenresIds() {
	m.genres_ids = nil
	m.appendgenres_ids = nil
	delete(m.clearedFields, picture.FieldGenresIds)
}

// SetAuthorsIds sets the "authors_ids" field.
func (m *PictureMutation) SetAuthorsIds(s []string) {
	m.authors_ids = &s
	m.appendauthors_ids = nil
}

// AuthorsIds returns the value of the "authors_ids" field in the mutation.
func (m *PictureMutation) AuthorsIds() (r []string, exists bool) {
	v := m.authors_ids
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthorsIds returns the old "authors_ids" field's value of the Picture entity.
// If the Picture object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PictureMutation) OldAuthorsIds(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthorsIds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthorsIds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthorsIds: %w", err)
	}
	return oldValue.AuthorsIds, nil
}

// AppendAuthorsIds adds s to the "authors_ids" field.
func (m *PictureMutation) AppendAuthorsIds(s []string) {
	m.appendauthors_ids = append(m.appendauthors_ids, s...)
}

// AppendedAuthorsIds returns the list of values that were appended to the "authors_ids" field in this mutation.
func (m *PictureMutation) AppendedAuthorsIds() ([]string, bool) {
	if len(m.appendauthors_ids) == 0 {
		return nil, false
	}
	return m.appendauthors_ids, true
}

// ClearAuthorsIds clears the value of the "authors_ids" field.
func (m *PictureMutation) ClearAuthorsIds() {
	m.authors_ids = nil
	m.appendauthors_ids = nil
	m.clearedFields[picture.FieldAuthorsIds] = struct{}{}
}

// AuthorsIdsCleared returns if the "authors_ids" field was cleared in this mutation.
func (m *PictureMutation) AuthorsIdsCleared() bool {
	_, ok := m.clearedFields[picture.FieldAuthorsIds]
	return ok
}

// ResetAuthorsIds resets all changes to the "authors_ids" field.
func (m *PictureMutation) ResetAuthorsIds() {
	m.authors_ids = nil
	m.appendauthors_ids = nil
	delete(m.clearedFields, picture.FieldAuthorsIds)
}

// SetExhibitionID sets the "exhibition_id" field.
func (m *PictureMutation) SetExhibitionID(s string) {
	m.exhibition_id = &s
}

// ExhibitionID returns the value of the "exhibition_id" field in the mutation.
func (m *PictureMutation) ExhibitionID() (r string, exists bool) {
	v := m.exhibition_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExhibitionID returns the old "exhibition_id" field's value of the Picture entity.
// If the Picture object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PictureMutation) OldExhibitionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExhibitionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExhibitionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExhibitionID: %w", err)
	}
	return oldValue.ExhibitionID, nil
}

// ClearExhibitionID clears the value of the "exhibition_id" field.
func (m *PictureMutation) ClearExhibitionID() {
	m.exhibition_id = nil
	m.clearedFields[picture.FieldExhibitionID] = struct{}{}
}

// ExhibitionIDCleared returns if the "exhibition_id" field was cleared in this mutation.
func (m *PictureMutation) ExhibitionIDCleared() bool {
	_, ok := m.clearedFields[picture.FieldExhibitionID]
	return ok
}

// ResetExhibitionID resets all changes to the "exhibition_id" field.
func (m *PictureMutation) ResetExhibitionID() {
	m.exhibition_id = nil
	delete(m.clearedFields, picture.FieldExhibitionID)
}

// SetCost sets the "cost" field.
func (m *PictureMutation) SetCost(f float64) {
	m.cost = &f
	m.addcost = nil
}

// Cost returns the value of the "cost" field in the mutation.
func (m *PictureMutation) Cost() (r float64, exists bool) {
	v := m.cost
	if v == nil {
		return
	}
	return *v, true
}

// OldCost returns the old "cost" field's value of the Picture entity.
// If the Picture object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PictureMutation) OldCost(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCost: %w", err)
	}
	return oldValue.Cost, nil
}

// AddCost adds f to the "cost" field.
func (m *PictureMutation) AddCost(f float64) {
	if m.addcost != nil {
		*m.addcost += f
	} else {
		m.addcost = &f
	}
}

// AddedCost returns the value that was added to the "cost" field in this mutation.
func (m *PictureMutation) AddedCost() (r float64, exists bool) {
	v := m.addcost
	if v == nil {
		return
	}
	return *v, true
}

// ResetCost resets all changes to the "cost" field.
func (m *PictureMutation) ResetCost() {
	m.cost = nil
	m.addcost = nil
}

// SetLocation sets the "location" field.
func (m *PictureMutation) SetLocation(pi picture.Location) {
	m.location = &pi
}

// Location returns the value of the "location" field in the mutation.
func (m *PictureMutation) Location() (r picture.Location, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the Picture entity.
// If the Picture object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PictureMutation) OldLocation(ctx context.Context) (v picture.Location, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ResetLocation resets all changes to the "location" field.
func (m *PictureMutation) ResetLocation() {
	m.location = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PictureMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PictureMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Picture entity.
// If the Picture object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PictureMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PictureMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the PictureMutation builder.
func (m *PictureMutation) Where(ps ...predicate.Picture) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PictureMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PictureMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Picture, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PictureMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PictureMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Picture).
func (m *PictureMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PictureMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.name != nil {
		fields = append(fields, picture.FieldName)
	}
	if m.date_of_painting != nil {
		fields = append(fields, picture.FieldDateOfPainting)
	}
	if m.genres_ids != nil {
		fields = append(fields, picture.FieldGenresIds)
	}
	if m.authors_ids != nil {
		fields = append(fields, picture.FieldAuthorsIds)
	}
	if m.exhibition_id != nil {
		fields = append(fields, picture.FieldExhibitionID)
	}
	if m.cost != nil {
		fields = append(fields, picture.FieldCost)
	}
	if m.location != nil {
		fields = append(fields, picture.FieldLocation)
	}
	if m.created_at != nil {
		fields = append(fields, picture.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PictureMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case picture.FieldName:
		return m.Name()
	case picture.FieldDateOfPainting:
		return m.DateOfPainting()
	case picture.FieldGenresIds:
		return m.GenresIds()
	case picture.FieldAuthorsIds:
		return m.AuthorsIds()
	case picture.FieldExhibitionID:
		return m.ExhibitionID()
	case picture.FieldCost:
		return m.Cost()
	case picture.FieldLocation:
		return m.Location()
	case picture.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PictureMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case picture.FieldName:
		return m.OldName(ctx)
	case picture.FieldDateOfPainting:
		return m.OldDateOfPainting(ctx)
	case picture.FieldGenresIds:
		return m.OldGenresIds(ctx)
	case picture.FieldAuthorsIds:
		return m.OldAuthorsIds(ctx)
	case picture.FieldExhibitionID:
		return m.OldExhibitionID(ctx)
	case picture.FieldCost:
		return m.OldCost(ctx)
	case picture.FieldLocation:
		return m.OldLocation(ctx)
	case picture.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Picture field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PictureMutation) SetField(name string, value ent.Value) error {
	switch name {
	case picture.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case picture.FieldDateOfPainting:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateOfPainting(v)
		return nil
	case picture.FieldGenresIds:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGenresIds(v)
		return nil
	case picture.FieldAuthorsIds:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthorsIds(v)
		return nil
	case picture.FieldExhibitionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExhibitionID(v)
		return nil
	case picture.FieldCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCost(v)
		return nil
	case picture.FieldLocation:
		v, ok := value.(picture.Location)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case picture.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Picture field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PictureMutation) AddedFields() []string {
	var fields []string
	if m.addcost != nil {
		fields = append(fields, picture.FieldCost)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PictureMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case picture.FieldCost:
		return m.AddedCost()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PictureMutation) AddField(name string, value ent.Value) error {
	switch name {
	case picture.FieldCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCost(v)
		return nil
	}
	return fmt.Errorf("unknown Picture numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PictureMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(picture.FieldGenresIds) {
		fields = append(fields, picture.FieldGenresIds)
	}
	if m.FieldCleared(picture.FieldAuthorsIds) {
		fields = append(fields, picture.FieldAuthorsIds)
	}
	if m.FieldCleared(picture.FieldExhibitionID) {
		fields = append(fields, picture.FieldExhibitionID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PictureMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PictureMutation) ClearField(name string) error {
	switch name {
	case picture.FieldGenresIds:
		m.ClearGenresIds()
		return nil
	case picture.FieldAuthorsIds:
		m.ClearAuthorsIds()
		return nil
	case picture.FieldExhibitionID:
		m.ClearExhibitionID()
		return nil
	}
	return fmt.Errorf("unknown Picture nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PictureMutation) ResetField(name string) error {
	switch name {
	case picture.FieldName:
		m.ResetName()
		return nil
	case picture.FieldDateOfPainting:
		m.ResetDateOfPainting()
		return nil
	case picture.FieldGenresIds:
		m.ResetGenresIds()
		return nil
	case picture.FieldAuthorsIds:
		m.ResetAuthorsIds()
		return nil
	case picture.FieldExhibitionID:
		m.ResetExhibitionID()
		return nil
	case picture.FieldCost:
		m.ResetCost()
		return nil
	case picture.FieldLocation:
		m.ResetLocation()
		return nil
	case picture.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Picture field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PictureMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PictureMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PictureMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PictureMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PictureMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PictureMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PictureMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Picture unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PictureMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Picture edge %s", name)
}
