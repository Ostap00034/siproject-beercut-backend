// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Ostap00034/siproject-beercut-backend/picture-service/ent/picture"
)

// PictureCreate is the builder for creating a Picture entity.
type PictureCreate struct {
	config
	mutation *PictureMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *PictureCreate) SetName(s string) *PictureCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetDateOfPainting sets the "date_of_painting" field.
func (pc *PictureCreate) SetDateOfPainting(s string) *PictureCreate {
	pc.mutation.SetDateOfPainting(s)
	return pc
}

// SetGenresIds sets the "genres_ids" field.
func (pc *PictureCreate) SetGenresIds(s []string) *PictureCreate {
	pc.mutation.SetGenresIds(s)
	return pc
}

// SetAuthorsIds sets the "authors_ids" field.
func (pc *PictureCreate) SetAuthorsIds(s []string) *PictureCreate {
	pc.mutation.SetAuthorsIds(s)
	return pc
}

// SetExhibitionID sets the "exhibition_id" field.
func (pc *PictureCreate) SetExhibitionID(s string) *PictureCreate {
	pc.mutation.SetExhibitionID(s)
	return pc
}

// SetNillableExhibitionID sets the "exhibition_id" field if the given value is not nil.
func (pc *PictureCreate) SetNillableExhibitionID(s *string) *PictureCreate {
	if s != nil {
		pc.SetExhibitionID(*s)
	}
	return pc
}

// SetCost sets the "cost" field.
func (pc *PictureCreate) SetCost(f float64) *PictureCreate {
	pc.mutation.SetCost(f)
	return pc
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (pc *PictureCreate) SetNillableCost(f *float64) *PictureCreate {
	if f != nil {
		pc.SetCost(*f)
	}
	return pc
}

// SetLocation sets the "location" field.
func (pc *PictureCreate) SetLocation(pi picture.Location) *PictureCreate {
	pc.mutation.SetLocation(pi)
	return pc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (pc *PictureCreate) SetNillableLocation(pi *picture.Location) *PictureCreate {
	if pi != nil {
		pc.SetLocation(*pi)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PictureCreate) SetCreatedAt(t time.Time) *PictureCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PictureCreate) SetNillableCreatedAt(t *time.Time) *PictureCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// Mutation returns the PictureMutation object of the builder.
func (pc *PictureCreate) Mutation() *PictureMutation {
	return pc.mutation
}

// Save creates the Picture in the database.
func (pc *PictureCreate) Save(ctx context.Context) (*Picture, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PictureCreate) SaveX(ctx context.Context) *Picture {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PictureCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PictureCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PictureCreate) defaults() {
	if _, ok := pc.mutation.Cost(); !ok {
		v := picture.DefaultCost
		pc.mutation.SetCost(v)
	}
	if _, ok := pc.mutation.Location(); !ok {
		v := picture.DefaultLocation
		pc.mutation.SetLocation(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := picture.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PictureCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Picture.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := picture.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Picture.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.DateOfPainting(); !ok {
		return &ValidationError{Name: "date_of_painting", err: errors.New(`ent: missing required field "Picture.date_of_painting"`)}
	}
	if v, ok := pc.mutation.DateOfPainting(); ok {
		if err := picture.DateOfPaintingValidator(v); err != nil {
			return &ValidationError{Name: "date_of_painting", err: fmt.Errorf(`ent: validator failed for field "Picture.date_of_painting": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Cost(); !ok {
		return &ValidationError{Name: "cost", err: errors.New(`ent: missing required field "Picture.cost"`)}
	}
	if _, ok := pc.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "Picture.location"`)}
	}
	if v, ok := pc.mutation.Location(); ok {
		if err := picture.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Picture.location": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Picture.created_at"`)}
	}
	return nil
}

func (pc *PictureCreate) sqlSave(ctx context.Context) (*Picture, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PictureCreate) createSpec() (*Picture, *sqlgraph.CreateSpec) {
	var (
		_node = &Picture{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(picture.Table, sqlgraph.NewFieldSpec(picture.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(picture.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.DateOfPainting(); ok {
		_spec.SetField(picture.FieldDateOfPainting, field.TypeString, value)
		_node.DateOfPainting = value
	}
	if value, ok := pc.mutation.GenresIds(); ok {
		_spec.SetField(picture.FieldGenresIds, field.TypeJSON, value)
		_node.GenresIds = value
	}
	if value, ok := pc.mutation.AuthorsIds(); ok {
		_spec.SetField(picture.FieldAuthorsIds, field.TypeJSON, value)
		_node.AuthorsIds = value
	}
	if value, ok := pc.mutation.ExhibitionID(); ok {
		_spec.SetField(picture.FieldExhibitionID, field.TypeString, value)
		_node.ExhibitionID = value
	}
	if value, ok := pc.mutation.Cost(); ok {
		_spec.SetField(picture.FieldCost, field.TypeFloat64, value)
		_node.Cost = value
	}
	if value, ok := pc.mutation.Location(); ok {
		_spec.SetField(picture.FieldLocation, field.TypeEnum, value)
		_node.Location = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(picture.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// PictureCreateBulk is the builder for creating many Picture entities in bulk.
type PictureCreateBulk struct {
	config
	err      error
	builders []*PictureCreate
}

// Save creates the Picture entities in the database.
func (pcb *PictureCreateBulk) Save(ctx context.Context) ([]*Picture, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Picture, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PictureMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PictureCreateBulk) SaveX(ctx context.Context) []*Picture {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PictureCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PictureCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
