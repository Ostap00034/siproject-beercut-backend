// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/Ostap00034/siproject-beercut-backend/picture-service/ent/picture"
	"github.com/Ostap00034/siproject-beercut-backend/picture-service/ent/predicate"
)

// PictureUpdate is the builder for updating Picture entities.
type PictureUpdate struct {
	config
	hooks    []Hook
	mutation *PictureMutation
}

// Where appends a list predicates to the PictureUpdate builder.
func (pu *PictureUpdate) Where(ps ...predicate.Picture) *PictureUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PictureUpdate) SetName(s string) *PictureUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PictureUpdate) SetNillableName(s *string) *PictureUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetDateOfPainting sets the "date_of_painting" field.
func (pu *PictureUpdate) SetDateOfPainting(s string) *PictureUpdate {
	pu.mutation.SetDateOfPainting(s)
	return pu
}

// SetNillableDateOfPainting sets the "date_of_painting" field if the given value is not nil.
func (pu *PictureUpdate) SetNillableDateOfPainting(s *string) *PictureUpdate {
	if s != nil {
		pu.SetDateOfPainting(*s)
	}
	return pu
}

// SetGenresIds sets the "genres_ids" field.
func (pu *PictureUpdate) SetGenresIds(s []string) *PictureUpdate {
	pu.mutation.SetGenresIds(s)
	return pu
}

// AppendGenresIds appends s to the "genres_ids" field.
func (pu *PictureUpdate) AppendGenresIds(s []string) *PictureUpdate {
	pu.mutation.AppendGenresIds(s)
	return pu
}

// ClearGenresIds clears the value of the "genres_ids" field.
func (pu *PictureUpdate) ClearGenresIds() *PictureUpdate {
	pu.mutation.ClearGenresIds()
	return pu
}

// SetAuthorsIds sets the "authors_ids" field.
func (pu *PictureUpdate) SetAuthorsIds(s []string) *PictureUpdate {
	pu.mutation.SetAuthorsIds(s)
	return pu
}

// AppendAuthorsIds appends s to the "authors_ids" field.
func (pu *PictureUpdate) AppendAuthorsIds(s []string) *PictureUpdate {
	pu.mutation.AppendAuthorsIds(s)
	return pu
}

// ClearAuthorsIds clears the value of the "authors_ids" field.
func (pu *PictureUpdate) ClearAuthorsIds() *PictureUpdate {
	pu.mutation.ClearAuthorsIds()
	return pu
}

// SetExhibitionID sets the "exhibition_id" field.
func (pu *PictureUpdate) SetExhibitionID(s string) *PictureUpdate {
	pu.mutation.SetExhibitionID(s)
	return pu
}

// SetNillableExhibitionID sets the "exhibition_id" field if the given value is not nil.
func (pu *PictureUpdate) SetNillableExhibitionID(s *string) *PictureUpdate {
	if s != nil {
		pu.SetExhibitionID(*s)
	}
	return pu
}

// ClearExhibitionID clears the value of the "exhibition_id" field.
func (pu *PictureUpdate) ClearExhibitionID() *PictureUpdate {
	pu.mutation.ClearExhibitionID()
	return pu
}

// SetCost sets the "cost" field.
func (pu *PictureUpdate) SetCost(f float64) *PictureUpdate {
	pu.mutation.ResetCost()
	pu.mutation.SetCost(f)
	return pu
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (pu *PictureUpdate) SetNillableCost(f *float64) *PictureUpdate {
	if f != nil {
		pu.SetCost(*f)
	}
	return pu
}

// AddCost adds f to the "cost" field.
func (pu *PictureUpdate) AddCost(f float64) *PictureUpdate {
	pu.mutation.AddCost(f)
	return pu
}

// SetLocation sets the "location" field.
func (pu *PictureUpdate) SetLocation(pi picture.Location) *PictureUpdate {
	pu.mutation.SetLocation(pi)
	return pu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (pu *PictureUpdate) SetNillableLocation(pi *picture.Location) *PictureUpdate {
	if pi != nil {
		pu.SetLocation(*pi)
	}
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PictureUpdate) SetCreatedAt(t time.Time) *PictureUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PictureUpdate) SetNillableCreatedAt(t *time.Time) *PictureUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// Mutation returns the PictureMutation object of the builder.
func (pu *PictureUpdate) Mutation() *PictureMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PictureUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PictureUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PictureUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PictureUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PictureUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := picture.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Picture.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.DateOfPainting(); ok {
		if err := picture.DateOfPaintingValidator(v); err != nil {
			return &ValidationError{Name: "date_of_painting", err: fmt.Errorf(`ent: validator failed for field "Picture.date_of_painting": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Location(); ok {
		if err := picture.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Picture.location": %w`, err)}
		}
	}
	return nil
}

func (pu *PictureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(picture.Table, picture.Columns, sqlgraph.NewFieldSpec(picture.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(picture.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.DateOfPainting(); ok {
		_spec.SetField(picture.FieldDateOfPainting, field.TypeString, value)
	}
	if value, ok := pu.mutation.GenresIds(); ok {
		_spec.SetField(picture.FieldGenresIds, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedGenresIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, picture.FieldGenresIds, value)
		})
	}
	if pu.mutation.GenresIdsCleared() {
		_spec.ClearField(picture.FieldGenresIds, field.TypeJSON)
	}
	if value, ok := pu.mutation.AuthorsIds(); ok {
		_spec.SetField(picture.FieldAuthorsIds, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedAuthorsIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, picture.FieldAuthorsIds, value)
		})
	}
	if pu.mutation.AuthorsIdsCleared() {
		_spec.ClearField(picture.FieldAuthorsIds, field.TypeJSON)
	}
	if value, ok := pu.mutation.ExhibitionID(); ok {
		_spec.SetField(picture.FieldExhibitionID, field.TypeString, value)
	}
	if pu.mutation.ExhibitionIDCleared() {
		_spec.ClearField(picture.FieldExhibitionID, field.TypeString)
	}
	if value, ok := pu.mutation.Cost(); ok {
		_spec.SetField(picture.FieldCost, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedCost(); ok {
		_spec.AddField(picture.FieldCost, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.Location(); ok {
		_spec.SetField(picture.FieldLocation, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(picture.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{picture.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PictureUpdateOne is the builder for updating a single Picture entity.
type PictureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PictureMutation
}

// SetName sets the "name" field.
func (puo *PictureUpdateOne) SetName(s string) *PictureUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PictureUpdateOne) SetNillableName(s *string) *PictureUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetDateOfPainting sets the "date_of_painting" field.
func (puo *PictureUpdateOne) SetDateOfPainting(s string) *PictureUpdateOne {
	puo.mutation.SetDateOfPainting(s)
	return puo
}

// SetNillableDateOfPainting sets the "date_of_painting" field if the given value is not nil.
func (puo *PictureUpdateOne) SetNillableDateOfPainting(s *string) *PictureUpdateOne {
	if s != nil {
		puo.SetDateOfPainting(*s)
	}
	return puo
}

// SetGenresIds sets the "genres_ids" field.
func (puo *PictureUpdateOne) SetGenresIds(s []string) *PictureUpdateOne {
	puo.mutation.SetGenresIds(s)
	return puo
}

// AppendGenresIds appends s to the "genres_ids" field.
func (puo *PictureUpdateOne) AppendGenresIds(s []string) *PictureUpdateOne {
	puo.mutation.AppendGenresIds(s)
	return puo
}

// ClearGenresIds clears the value of the "genres_ids" field.
func (puo *PictureUpdateOne) ClearGenresIds() *PictureUpdateOne {
	puo.mutation.ClearGenresIds()
	return puo
}

// SetAuthorsIds sets the "authors_ids" field.
func (puo *PictureUpdateOne) SetAuthorsIds(s []string) *PictureUpdateOne {
	puo.mutation.SetAuthorsIds(s)
	return puo
}

// AppendAuthorsIds appends s to the "authors_ids" field.
func (puo *PictureUpdateOne) AppendAuthorsIds(s []string) *PictureUpdateOne {
	puo.mutation.AppendAuthorsIds(s)
	return puo
}

// ClearAuthorsIds clears the value of the "authors_ids" field.
func (puo *PictureUpdateOne) ClearAuthorsIds() *PictureUpdateOne {
	puo.mutation.ClearAuthorsIds()
	return puo
}

// SetExhibitionID sets the "exhibition_id" field.
func (puo *PictureUpdateOne) SetExhibitionID(s string) *PictureUpdateOne {
	puo.mutation.SetExhibitionID(s)
	return puo
}

// SetNillableExhibitionID sets the "exhibition_id" field if the given value is not nil.
func (puo *PictureUpdateOne) SetNillableExhibitionID(s *string) *PictureUpdateOne {
	if s != nil {
		puo.SetExhibitionID(*s)
	}
	return puo
}

// ClearExhibitionID clears the value of the "exhibition_id" field.
func (puo *PictureUpdateOne) ClearExhibitionID() *PictureUpdateOne {
	puo.mutation.ClearExhibitionID()
	return puo
}

// SetCost sets the "cost" field.
func (puo *PictureUpdateOne) SetCost(f float64) *PictureUpdateOne {
	puo.mutation.ResetCost()
	puo.mutation.SetCost(f)
	return puo
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (puo *PictureUpdateOne) SetNillableCost(f *float64) *PictureUpdateOne {
	if f != nil {
		puo.SetCost(*f)
	}
	return puo
}

// AddCost adds f to the "cost" field.
func (puo *PictureUpdateOne) AddCost(f float64) *PictureUpdateOne {
	puo.mutation.AddCost(f)
	return puo
}

// SetLocation sets the "location" field.
func (puo *PictureUpdateOne) SetLocation(pi picture.Location) *PictureUpdateOne {
	puo.mutation.SetLocation(pi)
	return puo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (puo *PictureUpdateOne) SetNillableLocation(pi *picture.Location) *PictureUpdateOne {
	if pi != nil {
		puo.SetLocation(*pi)
	}
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PictureUpdateOne) SetCreatedAt(t time.Time) *PictureUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PictureUpdateOne) SetNillableCreatedAt(t *time.Time) *PictureUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// Mutation returns the PictureMutation object of the builder.
func (puo *PictureUpdateOne) Mutation() *PictureMutation {
	return puo.mutation
}

// Where appends a list predicates to the PictureUpdate builder.
func (puo *PictureUpdateOne) Where(ps ...predicate.Picture) *PictureUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PictureUpdateOne) Select(field string, fields ...string) *PictureUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Picture entity.
func (puo *PictureUpdateOne) Save(ctx context.Context) (*Picture, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PictureUpdateOne) SaveX(ctx context.Context) *Picture {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PictureUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PictureUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PictureUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := picture.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Picture.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.DateOfPainting(); ok {
		if err := picture.DateOfPaintingValidator(v); err != nil {
			return &ValidationError{Name: "date_of_painting", err: fmt.Errorf(`ent: validator failed for field "Picture.date_of_painting": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Location(); ok {
		if err := picture.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Picture.location": %w`, err)}
		}
	}
	return nil
}

func (puo *PictureUpdateOne) sqlSave(ctx context.Context) (_node *Picture, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(picture.Table, picture.Columns, sqlgraph.NewFieldSpec(picture.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Picture.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, picture.FieldID)
		for _, f := range fields {
			if !picture.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != picture.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(picture.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.DateOfPainting(); ok {
		_spec.SetField(picture.FieldDateOfPainting, field.TypeString, value)
	}
	if value, ok := puo.mutation.GenresIds(); ok {
		_spec.SetField(picture.FieldGenresIds, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedGenresIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, picture.FieldGenresIds, value)
		})
	}
	if puo.mutation.GenresIdsCleared() {
		_spec.ClearField(picture.FieldGenresIds, field.TypeJSON)
	}
	if value, ok := puo.mutation.AuthorsIds(); ok {
		_spec.SetField(picture.FieldAuthorsIds, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedAuthorsIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, picture.FieldAuthorsIds, value)
		})
	}
	if puo.mutation.AuthorsIdsCleared() {
		_spec.ClearField(picture.FieldAuthorsIds, field.TypeJSON)
	}
	if value, ok := puo.mutation.ExhibitionID(); ok {
		_spec.SetField(picture.FieldExhibitionID, field.TypeString, value)
	}
	if puo.mutation.ExhibitionIDCleared() {
		_spec.ClearField(picture.FieldExhibitionID, field.TypeString)
	}
	if value, ok := puo.mutation.Cost(); ok {
		_spec.SetField(picture.FieldCost, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedCost(); ok {
		_spec.AddField(picture.FieldCost, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.Location(); ok {
		_spec.SetField(picture.FieldLocation, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(picture.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Picture{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{picture.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
