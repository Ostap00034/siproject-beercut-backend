// Code generated by ent, DO NOT EDIT.

package picture

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Ostap00034/siproject-beercut-backend/picture-service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Picture {
	return predicate.Picture(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Picture {
	return predicate.Picture(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Picture {
	return predicate.Picture(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Picture {
	return predicate.Picture(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Picture {
	return predicate.Picture(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Picture {
	return predicate.Picture(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Picture {
	return predicate.Picture(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Picture {
	return predicate.Picture(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Picture {
	return predicate.Picture(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Picture {
	return predicate.Picture(sql.FieldEQ(FieldName, v))
}

// DateOfPainting applies equality check predicate on the "date_of_painting" field. It's identical to DateOfPaintingEQ.
func DateOfPainting(v string) predicate.Picture {
	return predicate.Picture(sql.FieldEQ(FieldDateOfPainting, v))
}

// ExhibitionID applies equality check predicate on the "exhibition_id" field. It's identical to ExhibitionIDEQ.
func ExhibitionID(v string) predicate.Picture {
	return predicate.Picture(sql.FieldEQ(FieldExhibitionID, v))
}

// Cost applies equality check predicate on the "cost" field. It's identical to CostEQ.
func Cost(v float64) predicate.Picture {
	return predicate.Picture(sql.FieldEQ(FieldCost, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Picture {
	return predicate.Picture(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Picture {
	return predicate.Picture(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Picture {
	return predicate.Picture(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Picture {
	return predicate.Picture(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Picture {
	return predicate.Picture(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Picture {
	return predicate.Picture(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Picture {
	return predicate.Picture(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Picture {
	return predicate.Picture(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Picture {
	return predicate.Picture(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Picture {
	return predicate.Picture(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Picture {
	return predicate.Picture(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Picture {
	return predicate.Picture(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Picture {
	return predicate.Picture(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Picture {
	return predicate.Picture(sql.FieldContainsFold(FieldName, v))
}

// DateOfPaintingEQ applies the EQ predicate on the "date_of_painting" field.
func DateOfPaintingEQ(v string) predicate.Picture {
	return predicate.Picture(sql.FieldEQ(FieldDateOfPainting, v))
}

// DateOfPaintingNEQ applies the NEQ predicate on the "date_of_painting" field.
func DateOfPaintingNEQ(v string) predicate.Picture {
	return predicate.Picture(sql.FieldNEQ(FieldDateOfPainting, v))
}

// DateOfPaintingIn applies the In predicate on the "date_of_painting" field.
func DateOfPaintingIn(vs ...string) predicate.Picture {
	return predicate.Picture(sql.FieldIn(FieldDateOfPainting, vs...))
}

// DateOfPaintingNotIn applies the NotIn predicate on the "date_of_painting" field.
func DateOfPaintingNotIn(vs ...string) predicate.Picture {
	return predicate.Picture(sql.FieldNotIn(FieldDateOfPainting, vs...))
}

// DateOfPaintingGT applies the GT predicate on the "date_of_painting" field.
func DateOfPaintingGT(v string) predicate.Picture {
	return predicate.Picture(sql.FieldGT(FieldDateOfPainting, v))
}

// DateOfPaintingGTE applies the GTE predicate on the "date_of_painting" field.
func DateOfPaintingGTE(v string) predicate.Picture {
	return predicate.Picture(sql.FieldGTE(FieldDateOfPainting, v))
}

// DateOfPaintingLT applies the LT predicate on the "date_of_painting" field.
func DateOfPaintingLT(v string) predicate.Picture {
	return predicate.Picture(sql.FieldLT(FieldDateOfPainting, v))
}

// DateOfPaintingLTE applies the LTE predicate on the "date_of_painting" field.
func DateOfPaintingLTE(v string) predicate.Picture {
	return predicate.Picture(sql.FieldLTE(FieldDateOfPainting, v))
}

// DateOfPaintingContains applies the Contains predicate on the "date_of_painting" field.
func DateOfPaintingContains(v string) predicate.Picture {
	return predicate.Picture(sql.FieldContains(FieldDateOfPainting, v))
}

// DateOfPaintingHasPrefix applies the HasPrefix predicate on the "date_of_painting" field.
func DateOfPaintingHasPrefix(v string) predicate.Picture {
	return predicate.Picture(sql.FieldHasPrefix(FieldDateOfPainting, v))
}

// DateOfPaintingHasSuffix applies the HasSuffix predicate on the "date_of_painting" field.
func DateOfPaintingHasSuffix(v string) predicate.Picture {
	return predicate.Picture(sql.FieldHasSuffix(FieldDateOfPainting, v))
}

// DateOfPaintingEqualFold applies the EqualFold predicate on the "date_of_painting" field.
func DateOfPaintingEqualFold(v string) predicate.Picture {
	return predicate.Picture(sql.FieldEqualFold(FieldDateOfPainting, v))
}

// DateOfPaintingContainsFold applies the ContainsFold predicate on the "date_of_painting" field.
func DateOfPaintingContainsFold(v string) predicate.Picture {
	return predicate.Picture(sql.FieldContainsFold(FieldDateOfPainting, v))
}

// GenresIdsIsNil applies the IsNil predicate on the "genres_ids" field.
func GenresIdsIsNil() predicate.Picture {
	return predicate.Picture(sql.FieldIsNull(FieldGenresIds))
}

// GenresIdsNotNil applies the NotNil predicate on the "genres_ids" field.
func GenresIdsNotNil() predicate.Picture {
	return predicate.Picture(sql.FieldNotNull(FieldGenresIds))
}

// AuthorsIdsIsNil applies the IsNil predicate on the "authors_ids" field.
func AuthorsIdsIsNil() predicate.Picture {
	return predicate.Picture(sql.FieldIsNull(FieldAuthorsIds))
}

// AuthorsIdsNotNil applies the NotNil predicate on the "authors_ids" field.
func AuthorsIdsNotNil() predicate.Picture {
	return predicate.Picture(sql.FieldNotNull(FieldAuthorsIds))
}

// ExhibitionIDEQ applies the EQ predicate on the "exhibition_id" field.
func ExhibitionIDEQ(v string) predicate.Picture {
	return predicate.Picture(sql.FieldEQ(FieldExhibitionID, v))
}

// ExhibitionIDNEQ applies the NEQ predicate on the "exhibition_id" field.
func ExhibitionIDNEQ(v string) predicate.Picture {
	return predicate.Picture(sql.FieldNEQ(FieldExhibitionID, v))
}

// ExhibitionIDIn applies the In predicate on the "exhibition_id" field.
func ExhibitionIDIn(vs ...string) predicate.Picture {
	return predicate.Picture(sql.FieldIn(FieldExhibitionID, vs...))
}

// ExhibitionIDNotIn applies the NotIn predicate on the "exhibition_id" field.
func ExhibitionIDNotIn(vs ...string) predicate.Picture {
	return predicate.Picture(sql.FieldNotIn(FieldExhibitionID, vs...))
}

// ExhibitionIDGT applies the GT predicate on the "exhibition_id" field.
func ExhibitionIDGT(v string) predicate.Picture {
	return predicate.Picture(sql.FieldGT(FieldExhibitionID, v))
}

// ExhibitionIDGTE applies the GTE predicate on the "exhibition_id" field.
func ExhibitionIDGTE(v string) predicate.Picture {
	return predicate.Picture(sql.FieldGTE(FieldExhibitionID, v))
}

// ExhibitionIDLT applies the LT predicate on the "exhibition_id" field.
func ExhibitionIDLT(v string) predicate.Picture {
	return predicate.Picture(sql.FieldLT(FieldExhibitionID, v))
}

// ExhibitionIDLTE applies the LTE predicate on the "exhibition_id" field.
func ExhibitionIDLTE(v string) predicate.Picture {
	return predicate.Picture(sql.FieldLTE(FieldExhibitionID, v))
}

// ExhibitionIDContains applies the Contains predicate on the "exhibition_id" field.
func ExhibitionIDContains(v string) predicate.Picture {
	return predicate.Picture(sql.FieldContains(FieldExhibitionID, v))
}

// ExhibitionIDHasPrefix applies the HasPrefix predicate on the "exhibition_id" field.
func ExhibitionIDHasPrefix(v string) predicate.Picture {
	return predicate.Picture(sql.FieldHasPrefix(FieldExhibitionID, v))
}

// ExhibitionIDHasSuffix applies the HasSuffix predicate on the "exhibition_id" field.
func ExhibitionIDHasSuffix(v string) predicate.Picture {
	return predicate.Picture(sql.FieldHasSuffix(FieldExhibitionID, v))
}

// ExhibitionIDIsNil applies the IsNil predicate on the "exhibition_id" field.
func ExhibitionIDIsNil() predicate.Picture {
	return predicate.Picture(sql.FieldIsNull(FieldExhibitionID))
}

// ExhibitionIDNotNil applies the NotNil predicate on the "exhibition_id" field.
func ExhibitionIDNotNil() predicate.Picture {
	return predicate.Picture(sql.FieldNotNull(FieldExhibitionID))
}

// ExhibitionIDEqualFold applies the EqualFold predicate on the "exhibition_id" field.
func ExhibitionIDEqualFold(v string) predicate.Picture {
	return predicate.Picture(sql.FieldEqualFold(FieldExhibitionID, v))
}

// ExhibitionIDContainsFold applies the ContainsFold predicate on the "exhibition_id" field.
func ExhibitionIDContainsFold(v string) predicate.Picture {
	return predicate.Picture(sql.FieldContainsFold(FieldExhibitionID, v))
}

// CostEQ applies the EQ predicate on the "cost" field.
func CostEQ(v float64) predicate.Picture {
	return predicate.Picture(sql.FieldEQ(FieldCost, v))
}

// CostNEQ applies the NEQ predicate on the "cost" field.
func CostNEQ(v float64) predicate.Picture {
	return predicate.Picture(sql.FieldNEQ(FieldCost, v))
}

// CostIn applies the In predicate on the "cost" field.
func CostIn(vs ...float64) predicate.Picture {
	return predicate.Picture(sql.FieldIn(FieldCost, vs...))
}

// CostNotIn applies the NotIn predicate on the "cost" field.
func CostNotIn(vs ...float64) predicate.Picture {
	return predicate.Picture(sql.FieldNotIn(FieldCost, vs...))
}

// CostGT applies the GT predicate on the "cost" field.
func CostGT(v float64) predicate.Picture {
	return predicate.Picture(sql.FieldGT(FieldCost, v))
}

// CostGTE applies the GTE predicate on the "cost" field.
func CostGTE(v float64) predicate.Picture {
	return predicate.Picture(sql.FieldGTE(FieldCost, v))
}

// CostLT applies the LT predicate on the "cost" field.
func CostLT(v float64) predicate.Picture {
	return predicate.Picture(sql.FieldLT(FieldCost, v))
}

// CostLTE applies the LTE predicate on the "cost" field.
func CostLTE(v float64) predicate.Picture {
	return predicate.Picture(sql.FieldLTE(FieldCost, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v Location) predicate.Picture {
	return predicate.Picture(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v Location) predicate.Picture {
	return predicate.Picture(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...Location) predicate.Picture {
	return predicate.Picture(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...Location) predicate.Picture {
	return predicate.Picture(sql.FieldNotIn(FieldLocation, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Picture {
	return predicate.Picture(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Picture {
	return predicate.Picture(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Picture {
	return predicate.Picture(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Picture {
	return predicate.Picture(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Picture {
	return predicate.Picture(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Picture {
	return predicate.Picture(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Picture {
	return predicate.Picture(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Picture {
	return predicate.Picture(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Picture) predicate.Picture {
	return predicate.Picture(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Picture) predicate.Picture {
	return predicate.Picture(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Picture) predicate.Picture {
	return predicate.Picture(sql.NotPredicates(p))
}
