// Code generated by ent, DO NOT EDIT.

package picture

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the picture type in the database.
	Label = "picture"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDateOfPainting holds the string denoting the date_of_painting field in the database.
	FieldDateOfPainting = "date_of_painting"
	// FieldGenresIds holds the string denoting the genres_ids field in the database.
	FieldGenresIds = "genres_ids"
	// FieldAuthorsIds holds the string denoting the authors_ids field in the database.
	FieldAuthorsIds = "authors_ids"
	// FieldExhibitionID holds the string denoting the exhibition_id field in the database.
	FieldExhibitionID = "exhibition_id"
	// FieldCost holds the string denoting the cost field in the database.
	FieldCost = "cost"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the picture in the database.
	Table = "pictures"
)

// Columns holds all SQL columns for picture fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDateOfPainting,
	FieldGenresIds,
	FieldAuthorsIds,
	FieldExhibitionID,
	FieldCost,
	FieldLocation,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DateOfPaintingValidator is a validator for the "date_of_painting" field. It is called by the builders before save.
	DateOfPaintingValidator func(string) error
	// DefaultCost holds the default value on creation for the "cost" field.
	DefaultCost float64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Location defines the type for the "location" enum field.
type Location string

// LocationIN_STORAGE is the default value of the Location enum.
const DefaultLocation = LocationIN_STORAGE

// Location values.
const (
	LocationIN_STORAGE     Location = "IN_STORAGE"
	LocationIN_EXHIBITION  Location = "IN_EXHIBITION"
	LocationIN_RESTORATION Location = "IN_RESTORATION"
)

func (l Location) String() string {
	return string(l)
}

// LocationValidator is a validator for the "location" field enum values. It is called by the builders before save.
func LocationValidator(l Location) error {
	switch l {
	case LocationIN_STORAGE, LocationIN_EXHIBITION, LocationIN_RESTORATION:
		return nil
	default:
		return fmt.Errorf("picture: invalid enum value for location field: %q", l)
	}
}

// OrderOption defines the ordering options for the Picture queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDateOfPainting orders the results by the date_of_painting field.
func ByDateOfPainting(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateOfPainting, opts...).ToFunc()
}

// ByExhibitionID orders the results by the exhibition_id field.
func ByExhibitionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExhibitionID, opts...).ToFunc()
}

// ByCost orders the results by the cost field.
func ByCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCost, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
