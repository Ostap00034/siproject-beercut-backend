// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Ostap00034/siproject-beercut-backend/movementhistory-service/ent/movementhistory"
)

// MovementHistoryCreate is the builder for creating a MovementHistory entity.
type MovementHistoryCreate struct {
	config
	mutation *MovementHistoryMutation
	hooks    []Hook
}

// SetPictureID sets the "picture_id" field.
func (mhc *MovementHistoryCreate) SetPictureID(s string) *MovementHistoryCreate {
	mhc.mutation.SetPictureID(s)
	return mhc
}

// SetUserID sets the "user_id" field.
func (mhc *MovementHistoryCreate) SetUserID(s string) *MovementHistoryCreate {
	mhc.mutation.SetUserID(s)
	return mhc
}

// SetFrom sets the "from" field.
func (mhc *MovementHistoryCreate) SetFrom(m movementhistory.From) *MovementHistoryCreate {
	mhc.mutation.SetFrom(m)
	return mhc
}

// SetTo sets the "to" field.
func (mhc *MovementHistoryCreate) SetTo(m movementhistory.To) *MovementHistoryCreate {
	mhc.mutation.SetTo(m)
	return mhc
}

// SetCreatedAt sets the "created_at" field.
func (mhc *MovementHistoryCreate) SetCreatedAt(t time.Time) *MovementHistoryCreate {
	mhc.mutation.SetCreatedAt(t)
	return mhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mhc *MovementHistoryCreate) SetNillableCreatedAt(t *time.Time) *MovementHistoryCreate {
	if t != nil {
		mhc.SetCreatedAt(*t)
	}
	return mhc
}

// Mutation returns the MovementHistoryMutation object of the builder.
func (mhc *MovementHistoryCreate) Mutation() *MovementHistoryMutation {
	return mhc.mutation
}

// Save creates the MovementHistory in the database.
func (mhc *MovementHistoryCreate) Save(ctx context.Context) (*MovementHistory, error) {
	mhc.defaults()
	return withHooks(ctx, mhc.sqlSave, mhc.mutation, mhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mhc *MovementHistoryCreate) SaveX(ctx context.Context) *MovementHistory {
	v, err := mhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mhc *MovementHistoryCreate) Exec(ctx context.Context) error {
	_, err := mhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mhc *MovementHistoryCreate) ExecX(ctx context.Context) {
	if err := mhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mhc *MovementHistoryCreate) defaults() {
	if _, ok := mhc.mutation.CreatedAt(); !ok {
		v := movementhistory.DefaultCreatedAt()
		mhc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mhc *MovementHistoryCreate) check() error {
	if _, ok := mhc.mutation.PictureID(); !ok {
		return &ValidationError{Name: "picture_id", err: errors.New(`ent: missing required field "MovementHistory.picture_id"`)}
	}
	if v, ok := mhc.mutation.PictureID(); ok {
		if err := movementhistory.PictureIDValidator(v); err != nil {
			return &ValidationError{Name: "picture_id", err: fmt.Errorf(`ent: validator failed for field "MovementHistory.picture_id": %w`, err)}
		}
	}
	if _, ok := mhc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "MovementHistory.user_id"`)}
	}
	if v, ok := mhc.mutation.UserID(); ok {
		if err := movementhistory.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "MovementHistory.user_id": %w`, err)}
		}
	}
	if _, ok := mhc.mutation.From(); !ok {
		return &ValidationError{Name: "from", err: errors.New(`ent: missing required field "MovementHistory.from"`)}
	}
	if v, ok := mhc.mutation.From(); ok {
		if err := movementhistory.FromValidator(v); err != nil {
			return &ValidationError{Name: "from", err: fmt.Errorf(`ent: validator failed for field "MovementHistory.from": %w`, err)}
		}
	}
	if _, ok := mhc.mutation.To(); !ok {
		return &ValidationError{Name: "to", err: errors.New(`ent: missing required field "MovementHistory.to"`)}
	}
	if v, ok := mhc.mutation.To(); ok {
		if err := movementhistory.ToValidator(v); err != nil {
			return &ValidationError{Name: "to", err: fmt.Errorf(`ent: validator failed for field "MovementHistory.to": %w`, err)}
		}
	}
	if _, ok := mhc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MovementHistory.created_at"`)}
	}
	return nil
}

func (mhc *MovementHistoryCreate) sqlSave(ctx context.Context) (*MovementHistory, error) {
	if err := mhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mhc.mutation.id = &_node.ID
	mhc.mutation.done = true
	return _node, nil
}

func (mhc *MovementHistoryCreate) createSpec() (*MovementHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &MovementHistory{config: mhc.config}
		_spec = sqlgraph.NewCreateSpec(movementhistory.Table, sqlgraph.NewFieldSpec(movementhistory.FieldID, field.TypeInt))
	)
	if value, ok := mhc.mutation.PictureID(); ok {
		_spec.SetField(movementhistory.FieldPictureID, field.TypeString, value)
		_node.PictureID = value
	}
	if value, ok := mhc.mutation.UserID(); ok {
		_spec.SetField(movementhistory.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := mhc.mutation.From(); ok {
		_spec.SetField(movementhistory.FieldFrom, field.TypeEnum, value)
		_node.From = value
	}
	if value, ok := mhc.mutation.To(); ok {
		_spec.SetField(movementhistory.FieldTo, field.TypeEnum, value)
		_node.To = value
	}
	if value, ok := mhc.mutation.CreatedAt(); ok {
		_spec.SetField(movementhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// MovementHistoryCreateBulk is the builder for creating many MovementHistory entities in bulk.
type MovementHistoryCreateBulk struct {
	config
	err      error
	builders []*MovementHistoryCreate
}

// Save creates the MovementHistory entities in the database.
func (mhcb *MovementHistoryCreateBulk) Save(ctx context.Context) ([]*MovementHistory, error) {
	if mhcb.err != nil {
		return nil, mhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mhcb.builders))
	nodes := make([]*MovementHistory, len(mhcb.builders))
	mutators := make([]Mutator, len(mhcb.builders))
	for i := range mhcb.builders {
		func(i int, root context.Context) {
			builder := mhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MovementHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mhcb *MovementHistoryCreateBulk) SaveX(ctx context.Context) []*MovementHistory {
	v, err := mhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mhcb *MovementHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := mhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mhcb *MovementHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := mhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
