// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Ostap00034/siproject-beercut-backend/movementhistory-service/ent/movementhistory"
	"github.com/Ostap00034/siproject-beercut-backend/movementhistory-service/ent/predicate"
)

// MovementHistoryUpdate is the builder for updating MovementHistory entities.
type MovementHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *MovementHistoryMutation
}

// Where appends a list predicates to the MovementHistoryUpdate builder.
func (mhu *MovementHistoryUpdate) Where(ps ...predicate.MovementHistory) *MovementHistoryUpdate {
	mhu.mutation.Where(ps...)
	return mhu
}

// SetPictureID sets the "picture_id" field.
func (mhu *MovementHistoryUpdate) SetPictureID(s string) *MovementHistoryUpdate {
	mhu.mutation.SetPictureID(s)
	return mhu
}

// SetNillablePictureID sets the "picture_id" field if the given value is not nil.
func (mhu *MovementHistoryUpdate) SetNillablePictureID(s *string) *MovementHistoryUpdate {
	if s != nil {
		mhu.SetPictureID(*s)
	}
	return mhu
}

// SetUserID sets the "user_id" field.
func (mhu *MovementHistoryUpdate) SetUserID(s string) *MovementHistoryUpdate {
	mhu.mutation.SetUserID(s)
	return mhu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mhu *MovementHistoryUpdate) SetNillableUserID(s *string) *MovementHistoryUpdate {
	if s != nil {
		mhu.SetUserID(*s)
	}
	return mhu
}

// SetFrom sets the "from" field.
func (mhu *MovementHistoryUpdate) SetFrom(m movementhistory.From) *MovementHistoryUpdate {
	mhu.mutation.SetFrom(m)
	return mhu
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (mhu *MovementHistoryUpdate) SetNillableFrom(m *movementhistory.From) *MovementHistoryUpdate {
	if m != nil {
		mhu.SetFrom(*m)
	}
	return mhu
}

// SetTo sets the "to" field.
func (mhu *MovementHistoryUpdate) SetTo(m movementhistory.To) *MovementHistoryUpdate {
	mhu.mutation.SetTo(m)
	return mhu
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (mhu *MovementHistoryUpdate) SetNillableTo(m *movementhistory.To) *MovementHistoryUpdate {
	if m != nil {
		mhu.SetTo(*m)
	}
	return mhu
}

// SetCreatedAt sets the "created_at" field.
func (mhu *MovementHistoryUpdate) SetCreatedAt(t time.Time) *MovementHistoryUpdate {
	mhu.mutation.SetCreatedAt(t)
	return mhu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mhu *MovementHistoryUpdate) SetNillableCreatedAt(t *time.Time) *MovementHistoryUpdate {
	if t != nil {
		mhu.SetCreatedAt(*t)
	}
	return mhu
}

// Mutation returns the MovementHistoryMutation object of the builder.
func (mhu *MovementHistoryUpdate) Mutation() *MovementHistoryMutation {
	return mhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mhu *MovementHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mhu.sqlSave, mhu.mutation, mhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mhu *MovementHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := mhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mhu *MovementHistoryUpdate) Exec(ctx context.Context) error {
	_, err := mhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mhu *MovementHistoryUpdate) ExecX(ctx context.Context) {
	if err := mhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mhu *MovementHistoryUpdate) check() error {
	if v, ok := mhu.mutation.PictureID(); ok {
		if err := movementhistory.PictureIDValidator(v); err != nil {
			return &ValidationError{Name: "picture_id", err: fmt.Errorf(`ent: validator failed for field "MovementHistory.picture_id": %w`, err)}
		}
	}
	if v, ok := mhu.mutation.UserID(); ok {
		if err := movementhistory.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "MovementHistory.user_id": %w`, err)}
		}
	}
	if v, ok := mhu.mutation.From(); ok {
		if err := movementhistory.FromValidator(v); err != nil {
			return &ValidationError{Name: "from", err: fmt.Errorf(`ent: validator failed for field "MovementHistory.from": %w`, err)}
		}
	}
	if v, ok := mhu.mutation.To(); ok {
		if err := movementhistory.ToValidator(v); err != nil {
			return &ValidationError{Name: "to", err: fmt.Errorf(`ent: validator failed for field "MovementHistory.to": %w`, err)}
		}
	}
	return nil
}

func (mhu *MovementHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mhu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(movementhistory.Table, movementhistory.Columns, sqlgraph.NewFieldSpec(movementhistory.FieldID, field.TypeInt))
	if ps := mhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mhu.mutation.PictureID(); ok {
		_spec.SetField(movementhistory.FieldPictureID, field.TypeString, value)
	}
	if value, ok := mhu.mutation.UserID(); ok {
		_spec.SetField(movementhistory.FieldUserID, field.TypeString, value)
	}
	if value, ok := mhu.mutation.From(); ok {
		_spec.SetField(movementhistory.FieldFrom, field.TypeEnum, value)
	}
	if value, ok := mhu.mutation.To(); ok {
		_spec.SetField(movementhistory.FieldTo, field.TypeEnum, value)
	}
	if value, ok := mhu.mutation.CreatedAt(); ok {
		_spec.SetField(movementhistory.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{movementhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mhu.mutation.done = true
	return n, nil
}

// MovementHistoryUpdateOne is the builder for updating a single MovementHistory entity.
type MovementHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MovementHistoryMutation
}

// SetPictureID sets the "picture_id" field.
func (mhuo *MovementHistoryUpdateOne) SetPictureID(s string) *MovementHistoryUpdateOne {
	mhuo.mutation.SetPictureID(s)
	return mhuo
}

// SetNillablePictureID sets the "picture_id" field if the given value is not nil.
func (mhuo *MovementHistoryUpdateOne) SetNillablePictureID(s *string) *MovementHistoryUpdateOne {
	if s != nil {
		mhuo.SetPictureID(*s)
	}
	return mhuo
}

// SetUserID sets the "user_id" field.
func (mhuo *MovementHistoryUpdateOne) SetUserID(s string) *MovementHistoryUpdateOne {
	mhuo.mutation.SetUserID(s)
	return mhuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mhuo *MovementHistoryUpdateOne) SetNillableUserID(s *string) *MovementHistoryUpdateOne {
	if s != nil {
		mhuo.SetUserID(*s)
	}
	return mhuo
}

// SetFrom sets the "from" field.
func (mhuo *MovementHistoryUpdateOne) SetFrom(m movementhistory.From) *MovementHistoryUpdateOne {
	mhuo.mutation.SetFrom(m)
	return mhuo
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (mhuo *MovementHistoryUpdateOne) SetNillableFrom(m *movementhistory.From) *MovementHistoryUpdateOne {
	if m != nil {
		mhuo.SetFrom(*m)
	}
	return mhuo
}

// SetTo sets the "to" field.
func (mhuo *MovementHistoryUpdateOne) SetTo(m movementhistory.To) *MovementHistoryUpdateOne {
	mhuo.mutation.SetTo(m)
	return mhuo
}

// SetNillableTo sets the "to" field if the given value is not nil.
func (mhuo *MovementHistoryUpdateOne) SetNillableTo(m *movementhistory.To) *MovementHistoryUpdateOne {
	if m != nil {
		mhuo.SetTo(*m)
	}
	return mhuo
}

// SetCreatedAt sets the "created_at" field.
func (mhuo *MovementHistoryUpdateOne) SetCreatedAt(t time.Time) *MovementHistoryUpdateOne {
	mhuo.mutation.SetCreatedAt(t)
	return mhuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mhuo *MovementHistoryUpdateOne) SetNillableCreatedAt(t *time.Time) *MovementHistoryUpdateOne {
	if t != nil {
		mhuo.SetCreatedAt(*t)
	}
	return mhuo
}

// Mutation returns the MovementHistoryMutation object of the builder.
func (mhuo *MovementHistoryUpdateOne) Mutation() *MovementHistoryMutation {
	return mhuo.mutation
}

// Where appends a list predicates to the MovementHistoryUpdate builder.
func (mhuo *MovementHistoryUpdateOne) Where(ps ...predicate.MovementHistory) *MovementHistoryUpdateOne {
	mhuo.mutation.Where(ps...)
	return mhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mhuo *MovementHistoryUpdateOne) Select(field string, fields ...string) *MovementHistoryUpdateOne {
	mhuo.fields = append([]string{field}, fields...)
	return mhuo
}

// Save executes the query and returns the updated MovementHistory entity.
func (mhuo *MovementHistoryUpdateOne) Save(ctx context.Context) (*MovementHistory, error) {
	return withHooks(ctx, mhuo.sqlSave, mhuo.mutation, mhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mhuo *MovementHistoryUpdateOne) SaveX(ctx context.Context) *MovementHistory {
	node, err := mhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mhuo *MovementHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := mhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mhuo *MovementHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := mhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mhuo *MovementHistoryUpdateOne) check() error {
	if v, ok := mhuo.mutation.PictureID(); ok {
		if err := movementhistory.PictureIDValidator(v); err != nil {
			return &ValidationError{Name: "picture_id", err: fmt.Errorf(`ent: validator failed for field "MovementHistory.picture_id": %w`, err)}
		}
	}
	if v, ok := mhuo.mutation.UserID(); ok {
		if err := movementhistory.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "MovementHistory.user_id": %w`, err)}
		}
	}
	if v, ok := mhuo.mutation.From(); ok {
		if err := movementhistory.FromValidator(v); err != nil {
			return &ValidationError{Name: "from", err: fmt.Errorf(`ent: validator failed for field "MovementHistory.from": %w`, err)}
		}
	}
	if v, ok := mhuo.mutation.To(); ok {
		if err := movementhistory.ToValidator(v); err != nil {
			return &ValidationError{Name: "to", err: fmt.Errorf(`ent: validator failed for field "MovementHistory.to": %w`, err)}
		}
	}
	return nil
}

func (mhuo *MovementHistoryUpdateOne) sqlSave(ctx context.Context) (_node *MovementHistory, err error) {
	if err := mhuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(movementhistory.Table, movementhistory.Columns, sqlgraph.NewFieldSpec(movementhistory.FieldID, field.TypeInt))
	id, ok := mhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MovementHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, movementhistory.FieldID)
		for _, f := range fields {
			if !movementhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != movementhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mhuo.mutation.PictureID(); ok {
		_spec.SetField(movementhistory.FieldPictureID, field.TypeString, value)
	}
	if value, ok := mhuo.mutation.UserID(); ok {
		_spec.SetField(movementhistory.FieldUserID, field.TypeString, value)
	}
	if value, ok := mhuo.mutation.From(); ok {
		_spec.SetField(movementhistory.FieldFrom, field.TypeEnum, value)
	}
	if value, ok := mhuo.mutation.To(); ok {
		_spec.SetField(movementhistory.FieldTo, field.TypeEnum, value)
	}
	if value, ok := mhuo.mutation.CreatedAt(); ok {
		_spec.SetField(movementhistory.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &MovementHistory{config: mhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{movementhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mhuo.mutation.done = true
	return _node, nil
}
