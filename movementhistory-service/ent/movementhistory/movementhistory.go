// Code generated by ent, DO NOT EDIT.

package movementhistory

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the movementhistory type in the database.
	Label = "movement_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPictureID holds the string denoting the picture_id field in the database.
	FieldPictureID = "picture_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldFrom holds the string denoting the from field in the database.
	FieldFrom = "from"
	// FieldTo holds the string denoting the to field in the database.
	FieldTo = "to"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the movementhistory in the database.
	Table = "movement_histories"
)

// Columns holds all SQL columns for movementhistory fields.
var Columns = []string{
	FieldID,
	FieldPictureID,
	FieldUserID,
	FieldFrom,
	FieldTo,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// PictureIDValidator is a validator for the "picture_id" field. It is called by the builders before save.
	PictureIDValidator func(string) error
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// From defines the type for the "from" enum field.
type From string

// From values.
const (
	FromIN_STORAGE     From = "IN_STORAGE"
	FromIN_EXHIBITION  From = "IN_EXHIBITION"
	FromIN_RESTORATION From = "IN_RESTORATION"
)

func (f From) String() string {
	return string(f)
}

// FromValidator is a validator for the "from" field enum values. It is called by the builders before save.
func FromValidator(f From) error {
	switch f {
	case FromIN_STORAGE, FromIN_EXHIBITION, FromIN_RESTORATION:
		return nil
	default:
		return fmt.Errorf("movementhistory: invalid enum value for from field: %q", f)
	}
}

// To defines the type for the "to" enum field.
type To string

// To values.
const (
	ToIN_STORAGE     To = "IN_STORAGE"
	ToIN_EXHIBITION  To = "IN_EXHIBITION"
	ToIN_RESTORATION To = "IN_RESTORATION"
)

func (t To) String() string {
	return string(t)
}

// ToValidator is a validator for the "to" field enum values. It is called by the builders before save.
func ToValidator(t To) error {
	switch t {
	case ToIN_STORAGE, ToIN_EXHIBITION, ToIN_RESTORATION:
		return nil
	default:
		return fmt.Errorf("movementhistory: invalid enum value for to field: %q", t)
	}
}

// OrderOption defines the ordering options for the MovementHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPictureID orders the results by the picture_id field.
func ByPictureID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPictureID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByFrom orders the results by the from field.
func ByFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFrom, opts...).ToFunc()
}

// ByTo orders the results by the to field.
func ByTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTo, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
