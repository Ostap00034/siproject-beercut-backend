// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Ostap00034/siproject-beercut-backend/movementhistory-service/ent/movementhistory"
)

// MovementHistory is the model entity for the MovementHistory schema.
type MovementHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PictureID holds the value of the "picture_id" field.
	PictureID string `json:"picture_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// From holds the value of the "from" field.
	From movementhistory.From `json:"from,omitempty"`
	// To holds the value of the "to" field.
	To movementhistory.To `json:"to,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MovementHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case movementhistory.FieldID:
			values[i] = new(sql.NullInt64)
		case movementhistory.FieldPictureID, movementhistory.FieldUserID, movementhistory.FieldFrom, movementhistory.FieldTo:
			values[i] = new(sql.NullString)
		case movementhistory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MovementHistory fields.
func (mh *MovementHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case movementhistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mh.ID = int(value.Int64)
		case movementhistory.FieldPictureID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field picture_id", values[i])
			} else if value.Valid {
				mh.PictureID = value.String
			}
		case movementhistory.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				mh.UserID = value.String
			}
		case movementhistory.FieldFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from", values[i])
			} else if value.Valid {
				mh.From = movementhistory.From(value.String)
			}
		case movementhistory.FieldTo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to", values[i])
			} else if value.Valid {
				mh.To = movementhistory.To(value.String)
			}
		case movementhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mh.CreatedAt = value.Time
			}
		default:
			mh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MovementHistory.
// This includes values selected through modifiers, order, etc.
func (mh *MovementHistory) Value(name string) (ent.Value, error) {
	return mh.selectValues.Get(name)
}

// Update returns a builder for updating this MovementHistory.
// Note that you need to call MovementHistory.Unwrap() before calling this method if this MovementHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (mh *MovementHistory) Update() *MovementHistoryUpdateOne {
	return NewMovementHistoryClient(mh.config).UpdateOne(mh)
}

// Unwrap unwraps the MovementHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mh *MovementHistory) Unwrap() *MovementHistory {
	_tx, ok := mh.config.driver.(*txDriver)
	if !ok {
		panic("ent: MovementHistory is not a transactional entity")
	}
	mh.config.driver = _tx.drv
	return mh
}

// String implements the fmt.Stringer.
func (mh *MovementHistory) String() string {
	var builder strings.Builder
	builder.WriteString("MovementHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mh.ID))
	builder.WriteString("picture_id=")
	builder.WriteString(mh.PictureID)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(mh.UserID)
	builder.WriteString(", ")
	builder.WriteString("from=")
	builder.WriteString(fmt.Sprintf("%v", mh.From))
	builder.WriteString(", ")
	builder.WriteString("to=")
	builder.WriteString(fmt.Sprintf("%v", mh.To))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mh.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MovementHistories is a parsable slice of MovementHistory.
type MovementHistories []*MovementHistory
