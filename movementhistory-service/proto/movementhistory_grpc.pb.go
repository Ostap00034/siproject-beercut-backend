// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/movementhistory.proto

package movementhistory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MovementHistoryService_CreateMovementHistory_FullMethodName          = "/movementhistory.MovementHistoryService/CreateMovementHistory"
	MovementHistoryService_GetAll_FullMethodName                         = "/movementhistory.MovementHistoryService/GetAll"
	MovementHistoryService_GetMovementHistory_FullMethodName             = "/movementhistory.MovementHistoryService/GetMovementHistory"
	MovementHistoryService_GetMovementHistorysByPictureId_FullMethodName = "/movementhistory.MovementHistoryService/GetMovementHistorysByPictureId"
	MovementHistoryService_DeleteMovementHistory_FullMethodName          = "/movementhistory.MovementHistoryService/DeleteMovementHistory"
)

// MovementHistoryServiceClient is the client API for MovementHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovementHistoryServiceClient interface {
	CreateMovementHistory(ctx context.Context, in *CreateMovementHistoryRequest, opts ...grpc.CallOption) (*CreateMovementHistoryResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	GetMovementHistory(ctx context.Context, in *GetMovementHistoryRequest, opts ...grpc.CallOption) (*GetMovementHistoryResponse, error)
	GetMovementHistorysByPictureId(ctx context.Context, in *GetMovementHistorysByPictureIdRequest, opts ...grpc.CallOption) (*GetMovementHistorysByPictureIdResponse, error)
	DeleteMovementHistory(ctx context.Context, in *DeleteMovementHistoryRequest, opts ...grpc.CallOption) (*DeleteMovementHistoryResponse, error)
}

type movementHistoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovementHistoryServiceClient(cc grpc.ClientConnInterface) MovementHistoryServiceClient {
	return &movementHistoryServiceClient{cc}
}

func (c *movementHistoryServiceClient) CreateMovementHistory(ctx context.Context, in *CreateMovementHistoryRequest, opts ...grpc.CallOption) (*CreateMovementHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMovementHistoryResponse)
	err := c.cc.Invoke(ctx, MovementHistoryService_CreateMovementHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movementHistoryServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, MovementHistoryService_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movementHistoryServiceClient) GetMovementHistory(ctx context.Context, in *GetMovementHistoryRequest, opts ...grpc.CallOption) (*GetMovementHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMovementHistoryResponse)
	err := c.cc.Invoke(ctx, MovementHistoryService_GetMovementHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movementHistoryServiceClient) GetMovementHistorysByPictureId(ctx context.Context, in *GetMovementHistorysByPictureIdRequest, opts ...grpc.CallOption) (*GetMovementHistorysByPictureIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMovementHistorysByPictureIdResponse)
	err := c.cc.Invoke(ctx, MovementHistoryService_GetMovementHistorysByPictureId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movementHistoryServiceClient) DeleteMovementHistory(ctx context.Context, in *DeleteMovementHistoryRequest, opts ...grpc.CallOption) (*DeleteMovementHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMovementHistoryResponse)
	err := c.cc.Invoke(ctx, MovementHistoryService_DeleteMovementHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovementHistoryServiceServer is the server API for MovementHistoryService service.
// All implementations must embed UnimplementedMovementHistoryServiceServer
// for forward compatibility.
type MovementHistoryServiceServer interface {
	CreateMovementHistory(context.Context, *CreateMovementHistoryRequest) (*CreateMovementHistoryResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	GetMovementHistory(context.Context, *GetMovementHistoryRequest) (*GetMovementHistoryResponse, error)
	GetMovementHistorysByPictureId(context.Context, *GetMovementHistorysByPictureIdRequest) (*GetMovementHistorysByPictureIdResponse, error)
	DeleteMovementHistory(context.Context, *DeleteMovementHistoryRequest) (*DeleteMovementHistoryResponse, error)
	mustEmbedUnimplementedMovementHistoryServiceServer()
}

// UnimplementedMovementHistoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMovementHistoryServiceServer struct{}

func (UnimplementedMovementHistoryServiceServer) CreateMovementHistory(context.Context, *CreateMovementHistoryRequest) (*CreateMovementHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovementHistory not implemented")
}
func (UnimplementedMovementHistoryServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedMovementHistoryServiceServer) GetMovementHistory(context.Context, *GetMovementHistoryRequest) (*GetMovementHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovementHistory not implemented")
}
func (UnimplementedMovementHistoryServiceServer) GetMovementHistorysByPictureId(context.Context, *GetMovementHistorysByPictureIdRequest) (*GetMovementHistorysByPictureIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovementHistorysByPictureId not implemented")
}
func (UnimplementedMovementHistoryServiceServer) DeleteMovementHistory(context.Context, *DeleteMovementHistoryRequest) (*DeleteMovementHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovementHistory not implemented")
}
func (UnimplementedMovementHistoryServiceServer) mustEmbedUnimplementedMovementHistoryServiceServer() {
}
func (UnimplementedMovementHistoryServiceServer) testEmbeddedByValue() {}

// UnsafeMovementHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovementHistoryServiceServer will
// result in compilation errors.
type UnsafeMovementHistoryServiceServer interface {
	mustEmbedUnimplementedMovementHistoryServiceServer()
}

func RegisterMovementHistoryServiceServer(s grpc.ServiceRegistrar, srv MovementHistoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedMovementHistoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MovementHistoryService_ServiceDesc, srv)
}

func _MovementHistoryService_CreateMovementHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMovementHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovementHistoryServiceServer).CreateMovementHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovementHistoryService_CreateMovementHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovementHistoryServiceServer).CreateMovementHistory(ctx, req.(*CreateMovementHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovementHistoryService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovementHistoryServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovementHistoryService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovementHistoryServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovementHistoryService_GetMovementHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovementHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovementHistoryServiceServer).GetMovementHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovementHistoryService_GetMovementHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovementHistoryServiceServer).GetMovementHistory(ctx, req.(*GetMovementHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovementHistoryService_GetMovementHistorysByPictureId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovementHistorysByPictureIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovementHistoryServiceServer).GetMovementHistorysByPictureId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovementHistoryService_GetMovementHistorysByPictureId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovementHistoryServiceServer).GetMovementHistorysByPictureId(ctx, req.(*GetMovementHistorysByPictureIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovementHistoryService_DeleteMovementHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMovementHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovementHistoryServiceServer).DeleteMovementHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovementHistoryService_DeleteMovementHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovementHistoryServiceServer).DeleteMovementHistory(ctx, req.(*DeleteMovementHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovementHistoryService_ServiceDesc is the grpc.ServiceDesc for MovementHistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovementHistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movementhistory.MovementHistoryService",
	HandlerType: (*MovementHistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMovementHistory",
			Handler:    _MovementHistoryService_CreateMovementHistory_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _MovementHistoryService_GetAll_Handler,
		},
		{
			MethodName: "GetMovementHistory",
			Handler:    _MovementHistoryService_GetMovementHistory_Handler,
		},
		{
			MethodName: "GetMovementHistorysByPictureId",
			Handler:    _MovementHistoryService_GetMovementHistorysByPictureId_Handler,
		},
		{
			MethodName: "DeleteMovementHistory",
			Handler:    _MovementHistoryService_DeleteMovementHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/movementhistory.proto",
}
