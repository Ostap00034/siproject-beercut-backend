syntax = "proto3";

package auth;

option go_package = "github.com/Ostap00034/siproject-beercut-backend/auth-service/proto;auth";

import "google/api/annotations.proto";

service AuthService {
  // Регистрация нового пользователя
  rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse) {
    option (google.api.http) = {
      post: "/v1/auth/register"
      body: "*"
    };
  }
  // Аутентификация (вход) по email и паролю
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/v1/auth/login"
      body: "*"
    };
  }
  // Создание токена (при необходимости)
  rpc CreateToken(CreateTokenRequest) returns (CreateTokenResponse) {
    option (google.api.http) = {
      post: "/v1/auth/createToken"
      body: "*"
    };
  }
  // Валидация токена
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse) {
    option (google.api.http) = {
      post: "/v1/auth/validateToken"
      body: "*"
    };
  }
  // Удаление токена
  rpc DeleteToken(DeleteTokenRequest) returns (DeleteTokenResponse) {
    option (google.api.http) = {
      post: "/v1/auth/deleteToken"
      body: "*"
    };
  }
}

message RegisterUserRequest {
  string email = 1;
  string password = 2;
  string full_name = 3;
  string role = 4;
}

message RegisterUserResponse {
  string user_id = 1;
  string message = 2;
}

message LoginRequest {
  string email = 1;
  string password = 2;
}

message LoginResponse {
  string token = 1;
  string expires_at = 2;
  string user_id = 3;
  string role = 4;
}

message CreateTokenRequest {
  string user_id = 1;
  string role = 2;
}

message CreateTokenResponse {
  string token = 1;
  string expires_at = 2;
}

message ValidateTokenRequest {
  string token = 1;
}

message ValidateTokenResponse {
  bool valid = 1;
  string user_id = 2;
  string role = 3;
}

message DeleteTokenRequest {
  string token = 1;
}

message DeleteTokenResponse {
  bool success = 1;
}
