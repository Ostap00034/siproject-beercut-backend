// Code generated by ent, DO NOT EDIT.

package author

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Ostap00034/siproject-beercut-backend/author-service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Author {
	return predicate.Author(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Author {
	return predicate.Author(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Author {
	return predicate.Author(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Author {
	return predicate.Author(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Author {
	return predicate.Author(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Author {
	return predicate.Author(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Author {
	return predicate.Author(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Author {
	return predicate.Author(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Author {
	return predicate.Author(sql.FieldLTE(FieldID, id))
}

// FullName applies equality check predicate on the "full_name" field. It's identical to FullNameEQ.
func FullName(v string) predicate.Author {
	return predicate.Author(sql.FieldEQ(FieldFullName, v))
}

// DateOfBirth applies equality check predicate on the "date_of_birth" field. It's identical to DateOfBirthEQ.
func DateOfBirth(v string) predicate.Author {
	return predicate.Author(sql.FieldEQ(FieldDateOfBirth, v))
}

// DateOfDeath applies equality check predicate on the "date_of_death" field. It's identical to DateOfDeathEQ.
func DateOfDeath(v string) predicate.Author {
	return predicate.Author(sql.FieldEQ(FieldDateOfDeath, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Author {
	return predicate.Author(sql.FieldEQ(FieldCreatedAt, v))
}

// FullNameEQ applies the EQ predicate on the "full_name" field.
func FullNameEQ(v string) predicate.Author {
	return predicate.Author(sql.FieldEQ(FieldFullName, v))
}

// FullNameNEQ applies the NEQ predicate on the "full_name" field.
func FullNameNEQ(v string) predicate.Author {
	return predicate.Author(sql.FieldNEQ(FieldFullName, v))
}

// FullNameIn applies the In predicate on the "full_name" field.
func FullNameIn(vs ...string) predicate.Author {
	return predicate.Author(sql.FieldIn(FieldFullName, vs...))
}

// FullNameNotIn applies the NotIn predicate on the "full_name" field.
func FullNameNotIn(vs ...string) predicate.Author {
	return predicate.Author(sql.FieldNotIn(FieldFullName, vs...))
}

// FullNameGT applies the GT predicate on the "full_name" field.
func FullNameGT(v string) predicate.Author {
	return predicate.Author(sql.FieldGT(FieldFullName, v))
}

// FullNameGTE applies the GTE predicate on the "full_name" field.
func FullNameGTE(v string) predicate.Author {
	return predicate.Author(sql.FieldGTE(FieldFullName, v))
}

// FullNameLT applies the LT predicate on the "full_name" field.
func FullNameLT(v string) predicate.Author {
	return predicate.Author(sql.FieldLT(FieldFullName, v))
}

// FullNameLTE applies the LTE predicate on the "full_name" field.
func FullNameLTE(v string) predicate.Author {
	return predicate.Author(sql.FieldLTE(FieldFullName, v))
}

// FullNameContains applies the Contains predicate on the "full_name" field.
func FullNameContains(v string) predicate.Author {
	return predicate.Author(sql.FieldContains(FieldFullName, v))
}

// FullNameHasPrefix applies the HasPrefix predicate on the "full_name" field.
func FullNameHasPrefix(v string) predicate.Author {
	return predicate.Author(sql.FieldHasPrefix(FieldFullName, v))
}

// FullNameHasSuffix applies the HasSuffix predicate on the "full_name" field.
func FullNameHasSuffix(v string) predicate.Author {
	return predicate.Author(sql.FieldHasSuffix(FieldFullName, v))
}

// FullNameEqualFold applies the EqualFold predicate on the "full_name" field.
func FullNameEqualFold(v string) predicate.Author {
	return predicate.Author(sql.FieldEqualFold(FieldFullName, v))
}

// FullNameContainsFold applies the ContainsFold predicate on the "full_name" field.
func FullNameContainsFold(v string) predicate.Author {
	return predicate.Author(sql.FieldContainsFold(FieldFullName, v))
}

// DateOfBirthEQ applies the EQ predicate on the "date_of_birth" field.
func DateOfBirthEQ(v string) predicate.Author {
	return predicate.Author(sql.FieldEQ(FieldDateOfBirth, v))
}

// DateOfBirthNEQ applies the NEQ predicate on the "date_of_birth" field.
func DateOfBirthNEQ(v string) predicate.Author {
	return predicate.Author(sql.FieldNEQ(FieldDateOfBirth, v))
}

// DateOfBirthIn applies the In predicate on the "date_of_birth" field.
func DateOfBirthIn(vs ...string) predicate.Author {
	return predicate.Author(sql.FieldIn(FieldDateOfBirth, vs...))
}

// DateOfBirthNotIn applies the NotIn predicate on the "date_of_birth" field.
func DateOfBirthNotIn(vs ...string) predicate.Author {
	return predicate.Author(sql.FieldNotIn(FieldDateOfBirth, vs...))
}

// DateOfBirthGT applies the GT predicate on the "date_of_birth" field.
func DateOfBirthGT(v string) predicate.Author {
	return predicate.Author(sql.FieldGT(FieldDateOfBirth, v))
}

// DateOfBirthGTE applies the GTE predicate on the "date_of_birth" field.
func DateOfBirthGTE(v string) predicate.Author {
	return predicate.Author(sql.FieldGTE(FieldDateOfBirth, v))
}

// DateOfBirthLT applies the LT predicate on the "date_of_birth" field.
func DateOfBirthLT(v string) predicate.Author {
	return predicate.Author(sql.FieldLT(FieldDateOfBirth, v))
}

// DateOfBirthLTE applies the LTE predicate on the "date_of_birth" field.
func DateOfBirthLTE(v string) predicate.Author {
	return predicate.Author(sql.FieldLTE(FieldDateOfBirth, v))
}

// DateOfBirthContains applies the Contains predicate on the "date_of_birth" field.
func DateOfBirthContains(v string) predicate.Author {
	return predicate.Author(sql.FieldContains(FieldDateOfBirth, v))
}

// DateOfBirthHasPrefix applies the HasPrefix predicate on the "date_of_birth" field.
func DateOfBirthHasPrefix(v string) predicate.Author {
	return predicate.Author(sql.FieldHasPrefix(FieldDateOfBirth, v))
}

// DateOfBirthHasSuffix applies the HasSuffix predicate on the "date_of_birth" field.
func DateOfBirthHasSuffix(v string) predicate.Author {
	return predicate.Author(sql.FieldHasSuffix(FieldDateOfBirth, v))
}

// DateOfBirthEqualFold applies the EqualFold predicate on the "date_of_birth" field.
func DateOfBirthEqualFold(v string) predicate.Author {
	return predicate.Author(sql.FieldEqualFold(FieldDateOfBirth, v))
}

// DateOfBirthContainsFold applies the ContainsFold predicate on the "date_of_birth" field.
func DateOfBirthContainsFold(v string) predicate.Author {
	return predicate.Author(sql.FieldContainsFold(FieldDateOfBirth, v))
}

// DateOfDeathEQ applies the EQ predicate on the "date_of_death" field.
func DateOfDeathEQ(v string) predicate.Author {
	return predicate.Author(sql.FieldEQ(FieldDateOfDeath, v))
}

// DateOfDeathNEQ applies the NEQ predicate on the "date_of_death" field.
func DateOfDeathNEQ(v string) predicate.Author {
	return predicate.Author(sql.FieldNEQ(FieldDateOfDeath, v))
}

// DateOfDeathIn applies the In predicate on the "date_of_death" field.
func DateOfDeathIn(vs ...string) predicate.Author {
	return predicate.Author(sql.FieldIn(FieldDateOfDeath, vs...))
}

// DateOfDeathNotIn applies the NotIn predicate on the "date_of_death" field.
func DateOfDeathNotIn(vs ...string) predicate.Author {
	return predicate.Author(sql.FieldNotIn(FieldDateOfDeath, vs...))
}

// DateOfDeathGT applies the GT predicate on the "date_of_death" field.
func DateOfDeathGT(v string) predicate.Author {
	return predicate.Author(sql.FieldGT(FieldDateOfDeath, v))
}

// DateOfDeathGTE applies the GTE predicate on the "date_of_death" field.
func DateOfDeathGTE(v string) predicate.Author {
	return predicate.Author(sql.FieldGTE(FieldDateOfDeath, v))
}

// DateOfDeathLT applies the LT predicate on the "date_of_death" field.
func DateOfDeathLT(v string) predicate.Author {
	return predicate.Author(sql.FieldLT(FieldDateOfDeath, v))
}

// DateOfDeathLTE applies the LTE predicate on the "date_of_death" field.
func DateOfDeathLTE(v string) predicate.Author {
	return predicate.Author(sql.FieldLTE(FieldDateOfDeath, v))
}

// DateOfDeathContains applies the Contains predicate on the "date_of_death" field.
func DateOfDeathContains(v string) predicate.Author {
	return predicate.Author(sql.FieldContains(FieldDateOfDeath, v))
}

// DateOfDeathHasPrefix applies the HasPrefix predicate on the "date_of_death" field.
func DateOfDeathHasPrefix(v string) predicate.Author {
	return predicate.Author(sql.FieldHasPrefix(FieldDateOfDeath, v))
}

// DateOfDeathHasSuffix applies the HasSuffix predicate on the "date_of_death" field.
func DateOfDeathHasSuffix(v string) predicate.Author {
	return predicate.Author(sql.FieldHasSuffix(FieldDateOfDeath, v))
}

// DateOfDeathIsNil applies the IsNil predicate on the "date_of_death" field.
func DateOfDeathIsNil() predicate.Author {
	return predicate.Author(sql.FieldIsNull(FieldDateOfDeath))
}

// DateOfDeathNotNil applies the NotNil predicate on the "date_of_death" field.
func DateOfDeathNotNil() predicate.Author {
	return predicate.Author(sql.FieldNotNull(FieldDateOfDeath))
}

// DateOfDeathEqualFold applies the EqualFold predicate on the "date_of_death" field.
func DateOfDeathEqualFold(v string) predicate.Author {
	return predicate.Author(sql.FieldEqualFold(FieldDateOfDeath, v))
}

// DateOfDeathContainsFold applies the ContainsFold predicate on the "date_of_death" field.
func DateOfDeathContainsFold(v string) predicate.Author {
	return predicate.Author(sql.FieldContainsFold(FieldDateOfDeath, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Author {
	return predicate.Author(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Author {
	return predicate.Author(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Author {
	return predicate.Author(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Author {
	return predicate.Author(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Author {
	return predicate.Author(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Author {
	return predicate.Author(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Author {
	return predicate.Author(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Author {
	return predicate.Author(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Author) predicate.Author {
	return predicate.Author(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Author) predicate.Author {
	return predicate.Author(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Author) predicate.Author {
	return predicate.Author(sql.NotPredicates(p))
}
