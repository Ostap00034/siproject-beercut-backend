// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Ostap00034/siproject-beercut-backend/author-service/ent/author"
)

// AuthorCreate is the builder for creating a Author entity.
type AuthorCreate struct {
	config
	mutation *AuthorMutation
	hooks    []Hook
}

// SetFullName sets the "full_name" field.
func (ac *AuthorCreate) SetFullName(s string) *AuthorCreate {
	ac.mutation.SetFullName(s)
	return ac
}

// SetDateOfBirth sets the "date_of_birth" field.
func (ac *AuthorCreate) SetDateOfBirth(s string) *AuthorCreate {
	ac.mutation.SetDateOfBirth(s)
	return ac
}

// SetDateOfDeath sets the "date_of_death" field.
func (ac *AuthorCreate) SetDateOfDeath(s string) *AuthorCreate {
	ac.mutation.SetDateOfDeath(s)
	return ac
}

// SetNillableDateOfDeath sets the "date_of_death" field if the given value is not nil.
func (ac *AuthorCreate) SetNillableDateOfDeath(s *string) *AuthorCreate {
	if s != nil {
		ac.SetDateOfDeath(*s)
	}
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AuthorCreate) SetCreatedAt(t time.Time) *AuthorCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AuthorCreate) SetNillableCreatedAt(t *time.Time) *AuthorCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// Mutation returns the AuthorMutation object of the builder.
func (ac *AuthorCreate) Mutation() *AuthorMutation {
	return ac.mutation
}

// Save creates the Author in the database.
func (ac *AuthorCreate) Save(ctx context.Context) (*Author, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AuthorCreate) SaveX(ctx context.Context) *Author {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AuthorCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AuthorCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AuthorCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := author.DefaultCreatedAt
		ac.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AuthorCreate) check() error {
	if _, ok := ac.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`ent: missing required field "Author.full_name"`)}
	}
	if _, ok := ac.mutation.DateOfBirth(); !ok {
		return &ValidationError{Name: "date_of_birth", err: errors.New(`ent: missing required field "Author.date_of_birth"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Author.created_at"`)}
	}
	return nil
}

func (ac *AuthorCreate) sqlSave(ctx context.Context) (*Author, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AuthorCreate) createSpec() (*Author, *sqlgraph.CreateSpec) {
	var (
		_node = &Author{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(author.Table, sqlgraph.NewFieldSpec(author.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.FullName(); ok {
		_spec.SetField(author.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := ac.mutation.DateOfBirth(); ok {
		_spec.SetField(author.FieldDateOfBirth, field.TypeString, value)
		_node.DateOfBirth = value
	}
	if value, ok := ac.mutation.DateOfDeath(); ok {
		_spec.SetField(author.FieldDateOfDeath, field.TypeString, value)
		_node.DateOfDeath = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(author.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// AuthorCreateBulk is the builder for creating many Author entities in bulk.
type AuthorCreateBulk struct {
	config
	err      error
	builders []*AuthorCreate
}

// Save creates the Author entities in the database.
func (acb *AuthorCreateBulk) Save(ctx context.Context) ([]*Author, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Author, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AuthorCreateBulk) SaveX(ctx context.Context) []*Author {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AuthorCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AuthorCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
